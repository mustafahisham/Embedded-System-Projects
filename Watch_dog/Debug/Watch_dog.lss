
Watch_dog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000744  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000426  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 15 03 	call	0x62a	; 0x62a <main>
  64:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_vidSetPortDir>:
#include "DIO.h"
#include "../Functions.h"


void DIO_vidSetPortDir(u8 u8PortName, u8 u8PortDir)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_vidSetPortDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_vidSetPortDir+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortName)
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	28 2f       	mov	r18, r24
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	3c 83       	std	Y+4, r19	; 0x04
  84:	2b 83       	std	Y+3, r18	; 0x03
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	9c 81       	ldd	r25, Y+4	; 0x04
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	91 05       	cpc	r25, r1
  8e:	d1 f0       	breq	.+52     	; 0xc4 <DIO_vidSetPortDir+0x58>
  90:	2b 81       	ldd	r18, Y+3	; 0x03
  92:	3c 81       	ldd	r19, Y+4	; 0x04
  94:	22 30       	cpi	r18, 0x02	; 2
  96:	31 05       	cpc	r19, r1
  98:	2c f4       	brge	.+10     	; 0xa4 <DIO_vidSetPortDir+0x38>
  9a:	8b 81       	ldd	r24, Y+3	; 0x03
  9c:	9c 81       	ldd	r25, Y+4	; 0x04
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	61 f0       	breq	.+24     	; 0xba <DIO_vidSetPortDir+0x4e>
  a2:	1e c0       	rjmp	.+60     	; 0xe0 <DIO_vidSetPortDir+0x74>
  a4:	2b 81       	ldd	r18, Y+3	; 0x03
  a6:	3c 81       	ldd	r19, Y+4	; 0x04
  a8:	22 30       	cpi	r18, 0x02	; 2
  aa:	31 05       	cpc	r19, r1
  ac:	81 f0       	breq	.+32     	; 0xce <DIO_vidSetPortDir+0x62>
  ae:	8b 81       	ldd	r24, Y+3	; 0x03
  b0:	9c 81       	ldd	r25, Y+4	; 0x04
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	91 05       	cpc	r25, r1
  b6:	81 f0       	breq	.+32     	; 0xd8 <DIO_vidSetPortDir+0x6c>
  b8:	13 c0       	rjmp	.+38     	; 0xe0 <DIO_vidSetPortDir+0x74>
	{
	  case PORTA:
	  {
		  DDRA_Register = u8PortDir ;
  ba:	ea e3       	ldi	r30, 0x3A	; 58
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	80 83       	st	Z, r24
  c2:	0e c0       	rjmp	.+28     	; 0xe0 <DIO_vidSetPortDir+0x74>

	  }break ;
	  case PORTB:
	  {
		  DDRB_Register = u8PortDir ;
  c4:	e7 e3       	ldi	r30, 0x37	; 55
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	80 83       	st	Z, r24
  cc:	09 c0       	rjmp	.+18     	; 0xe0 <DIO_vidSetPortDir+0x74>

	  }break ;
	  case PORTC:
	  {
		  DDRC_Register = u8PortDir ;
  ce:	e4 e3       	ldi	r30, 0x34	; 52
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	80 83       	st	Z, r24
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <DIO_vidSetPortDir+0x74>

	  }break ;
	  case PORTD:
	  {
		  DDRD_Register = u8PortDir ;
  d8:	e1 e3       	ldi	r30, 0x31	; 49
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	80 83       	st	Z, r24
	  }
	  break ;
	  default: /* Wrong Port ID */        break;
	}

}
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	cf 91       	pop	r28
  ea:	df 91       	pop	r29
  ec:	08 95       	ret

000000ee <DIO_vidSetPortVal>:

void DIO_vidSetPortVal(u8 u8PortName,u8 u8PortVal)
{
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	00 d0       	rcall	.+0      	; 0xf4 <DIO_vidSetPortVal+0x6>
  f4:	00 d0       	rcall	.+0      	; 0xf6 <DIO_vidSetPortVal+0x8>
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	6a 83       	std	Y+2, r22	; 0x02
	switch (u8PortName)
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	3c 83       	std	Y+4, r19	; 0x04
 106:	2b 83       	std	Y+3, r18	; 0x03
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	9c 81       	ldd	r25, Y+4	; 0x04
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	d1 f0       	breq	.+52     	; 0x146 <DIO_vidSetPortVal+0x58>
 112:	2b 81       	ldd	r18, Y+3	; 0x03
 114:	3c 81       	ldd	r19, Y+4	; 0x04
 116:	22 30       	cpi	r18, 0x02	; 2
 118:	31 05       	cpc	r19, r1
 11a:	2c f4       	brge	.+10     	; 0x126 <DIO_vidSetPortVal+0x38>
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	9c 81       	ldd	r25, Y+4	; 0x04
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	61 f0       	breq	.+24     	; 0x13c <DIO_vidSetPortVal+0x4e>
 124:	1e c0       	rjmp	.+60     	; 0x162 <DIO_vidSetPortVal+0x74>
 126:	2b 81       	ldd	r18, Y+3	; 0x03
 128:	3c 81       	ldd	r19, Y+4	; 0x04
 12a:	22 30       	cpi	r18, 0x02	; 2
 12c:	31 05       	cpc	r19, r1
 12e:	81 f0       	breq	.+32     	; 0x150 <DIO_vidSetPortVal+0x62>
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	9c 81       	ldd	r25, Y+4	; 0x04
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	91 05       	cpc	r25, r1
 138:	81 f0       	breq	.+32     	; 0x15a <DIO_vidSetPortVal+0x6c>
 13a:	13 c0       	rjmp	.+38     	; 0x162 <DIO_vidSetPortVal+0x74>
	{
	case PORTA :
		{
		PORTA_Register = u8PortVal;
 13c:	eb e3       	ldi	r30, 0x3B	; 59
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	80 83       	st	Z, r24
 144:	0e c0       	rjmp	.+28     	; 0x162 <DIO_vidSetPortVal+0x74>
		}break;

	case PORTB :
		{
		PORTB_Register = u8PortVal;
 146:	e8 e3       	ldi	r30, 0x38	; 56
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	80 83       	st	Z, r24
 14e:	09 c0       	rjmp	.+18     	; 0x162 <DIO_vidSetPortVal+0x74>
		}break;

	case PORTC :
		{
		PORTC_Register = u8PortVal;
 150:	e5 e3       	ldi	r30, 0x35	; 53
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	80 83       	st	Z, r24
 158:	04 c0       	rjmp	.+8      	; 0x162 <DIO_vidSetPortVal+0x74>
		}break;

		case PORTD :
		{
		PORTD_Register = u8PortVal;
 15a:	e2 e3       	ldi	r30, 0x32	; 50
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	80 83       	st	Z, r24
		}break;

		default: /* Wrong Port ID */        break;
	}
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	cf 91       	pop	r28
 16c:	df 91       	pop	r29
 16e:	08 95       	ret

00000170 <DIO_vidSetPinDir>:

void DIO_vidSetPinDir(u8 u8PortName, u8 u8PinNo, u8 u8PinDir)
{
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	00 d0       	rcall	.+0      	; 0x176 <DIO_vidSetPinDir+0x6>
 176:	00 d0       	rcall	.+0      	; 0x178 <DIO_vidSetPinDir+0x8>
 178:	0f 92       	push	r0
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	6a 83       	std	Y+2, r22	; 0x02
 182:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortName)
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	3d 83       	std	Y+5, r19	; 0x05
 18c:	2c 83       	std	Y+4, r18	; 0x04
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	9d 81       	ldd	r25, Y+5	; 0x05
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 05       	cpc	r25, r1
 196:	09 f4       	brne	.+2      	; 0x19a <DIO_vidSetPinDir+0x2a>
 198:	47 c0       	rjmp	.+142    	; 0x228 <DIO_vidSetPinDir+0xb8>
 19a:	2c 81       	ldd	r18, Y+4	; 0x04
 19c:	3d 81       	ldd	r19, Y+5	; 0x05
 19e:	22 30       	cpi	r18, 0x02	; 2
 1a0:	31 05       	cpc	r19, r1
 1a2:	2c f4       	brge	.+10     	; 0x1ae <DIO_vidSetPinDir+0x3e>
 1a4:	8c 81       	ldd	r24, Y+4	; 0x04
 1a6:	9d 81       	ldd	r25, Y+5	; 0x05
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	71 f0       	breq	.+28     	; 0x1c8 <DIO_vidSetPinDir+0x58>
 1ac:	cb c0       	rjmp	.+406    	; 0x344 <DIO_vidSetPinDir+0x1d4>
 1ae:	2c 81       	ldd	r18, Y+4	; 0x04
 1b0:	3d 81       	ldd	r19, Y+5	; 0x05
 1b2:	22 30       	cpi	r18, 0x02	; 2
 1b4:	31 05       	cpc	r19, r1
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vidSetPinDir+0x4a>
 1b8:	67 c0       	rjmp	.+206    	; 0x288 <DIO_vidSetPinDir+0x118>
 1ba:	8c 81       	ldd	r24, Y+4	; 0x04
 1bc:	9d 81       	ldd	r25, Y+5	; 0x05
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	91 05       	cpc	r25, r1
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <DIO_vidSetPinDir+0x56>
 1c4:	91 c0       	rjmp	.+290    	; 0x2e8 <DIO_vidSetPinDir+0x178>
 1c6:	be c0       	rjmp	.+380    	; 0x344 <DIO_vidSetPinDir+0x1d4>
	{
	  case PORTA :
	  {
		if(u8PinDir == PORTDIR_INPUT)
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	88 23       	and	r24, r24
 1cc:	a9 f4       	brne	.+42     	; 0x1f8 <DIO_vidSetPinDir+0x88>
		{
		  clr_bit(DDRA_Register,u8PinNo);
 1ce:	aa e3       	ldi	r26, 0x3A	; 58
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	48 2f       	mov	r20, r24
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	28 2f       	mov	r18, r24
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 2e       	mov	r0, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_vidSetPinDir+0x7c>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_vidSetPinDir+0x78>
 1f0:	80 95       	com	r24
 1f2:	84 23       	and	r24, r20
 1f4:	8c 93       	st	X, r24
 1f6:	a6 c0       	rjmp	.+332    	; 0x344 <DIO_vidSetPinDir+0x1d4>
		}

		else if (u8PinDir == PORTDIR_OUTPUT)
 1f8:	8b 81       	ldd	r24, Y+3	; 0x03
 1fa:	8f 3f       	cpi	r24, 0xFF	; 255
 1fc:	09 f0       	breq	.+2      	; 0x200 <DIO_vidSetPinDir+0x90>
 1fe:	a2 c0       	rjmp	.+324    	; 0x344 <DIO_vidSetPinDir+0x1d4>
		{
			set_bit(DDRA_Register, u8PinNo)	;
 200:	aa e3       	ldi	r26, 0x3A	; 58
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	ea e3       	ldi	r30, 0x3A	; 58
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	48 2f       	mov	r20, r24
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 2e       	mov	r0, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_vidSetPinDir+0xae>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_vidSetPinDir+0xaa>
 222:	84 2b       	or	r24, r20
 224:	8c 93       	st	X, r24
 226:	8e c0       	rjmp	.+284    	; 0x344 <DIO_vidSetPinDir+0x1d4>

	  } break;

	  case PORTB :
	  {
		if(u8PinDir == PORTDIR_INPUT)
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	88 23       	and	r24, r24
 22c:	a9 f4       	brne	.+42     	; 0x258 <DIO_vidSetPinDir+0xe8>
		{
		  clr_bit(DDRB_Register,u8PinNo);
 22e:	a7 e3       	ldi	r26, 0x37	; 55
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	e7 e3       	ldi	r30, 0x37	; 55
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	48 2f       	mov	r20, r24
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 2e       	mov	r0, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_vidSetPinDir+0xdc>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_vidSetPinDir+0xd8>
 250:	80 95       	com	r24
 252:	84 23       	and	r24, r20
 254:	8c 93       	st	X, r24
 256:	76 c0       	rjmp	.+236    	; 0x344 <DIO_vidSetPinDir+0x1d4>
		}

		else if (u8PinDir == PORTDIR_OUTPUT)
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	8f 3f       	cpi	r24, 0xFF	; 255
 25c:	09 f0       	breq	.+2      	; 0x260 <DIO_vidSetPinDir+0xf0>
 25e:	72 c0       	rjmp	.+228    	; 0x344 <DIO_vidSetPinDir+0x1d4>
		{
			set_bit(DDRB_Register, u8PinNo)	;
 260:	a7 e3       	ldi	r26, 0x37	; 55
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	e7 e3       	ldi	r30, 0x37	; 55
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	48 2f       	mov	r20, r24
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	28 2f       	mov	r18, r24
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 2e       	mov	r0, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_vidSetPinDir+0x10e>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_vidSetPinDir+0x10a>
 282:	84 2b       	or	r24, r20
 284:	8c 93       	st	X, r24
 286:	5e c0       	rjmp	.+188    	; 0x344 <DIO_vidSetPinDir+0x1d4>

	  } break;

	  case PORTC :
	  {
		if(u8PinDir == PORTDIR_INPUT)
 288:	8b 81       	ldd	r24, Y+3	; 0x03
 28a:	88 23       	and	r24, r24
 28c:	a9 f4       	brne	.+42     	; 0x2b8 <DIO_vidSetPinDir+0x148>
		{
		  clr_bit(DDRC_Register,u8PinNo);
 28e:	a4 e3       	ldi	r26, 0x34	; 52
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	e4 e3       	ldi	r30, 0x34	; 52
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	48 2f       	mov	r20, r24
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 2e       	mov	r0, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_vidSetPinDir+0x13c>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_vidSetPinDir+0x138>
 2b0:	80 95       	com	r24
 2b2:	84 23       	and	r24, r20
 2b4:	8c 93       	st	X, r24
 2b6:	46 c0       	rjmp	.+140    	; 0x344 <DIO_vidSetPinDir+0x1d4>
		}

		else if (u8PinDir == PORTDIR_OUTPUT)
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	8f 3f       	cpi	r24, 0xFF	; 255
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <DIO_vidSetPinDir+0x150>
 2be:	42 c0       	rjmp	.+132    	; 0x344 <DIO_vidSetPinDir+0x1d4>
		{
			set_bit(DDRC_Register, u8PinNo)	;
 2c0:	a4 e3       	ldi	r26, 0x34	; 52
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	e4 e3       	ldi	r30, 0x34	; 52
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	48 2f       	mov	r20, r24
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	28 2f       	mov	r18, r24
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 2e       	mov	r0, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_vidSetPinDir+0x16e>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_vidSetPinDir+0x16a>
 2e2:	84 2b       	or	r24, r20
 2e4:	8c 93       	st	X, r24
 2e6:	2e c0       	rjmp	.+92     	; 0x344 <DIO_vidSetPinDir+0x1d4>

	  } break;

	  case PORTD :
	  {
		if(u8PinDir == PORTDIR_INPUT)
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	88 23       	and	r24, r24
 2ec:	a9 f4       	brne	.+42     	; 0x318 <DIO_vidSetPinDir+0x1a8>
		{
		  clr_bit(DDRD_Register,u8PinNo);
 2ee:	a1 e3       	ldi	r26, 0x31	; 49
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	e1 e3       	ldi	r30, 0x31	; 49
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	48 2f       	mov	r20, r24
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	28 2f       	mov	r18, r24
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 2e       	mov	r0, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_vidSetPinDir+0x19c>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	0a 94       	dec	r0
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_vidSetPinDir+0x198>
 310:	80 95       	com	r24
 312:	84 23       	and	r24, r20
 314:	8c 93       	st	X, r24
 316:	16 c0       	rjmp	.+44     	; 0x344 <DIO_vidSetPinDir+0x1d4>
		}

		else if (u8PinDir == PORTDIR_OUTPUT)
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	8f 3f       	cpi	r24, 0xFF	; 255
 31c:	99 f4       	brne	.+38     	; 0x344 <DIO_vidSetPinDir+0x1d4>
		{
			set_bit(DDRD_Register, u8PinNo)	;
 31e:	a1 e3       	ldi	r26, 0x31	; 49
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e1 e3       	ldi	r30, 0x31	; 49
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_vidSetPinDir+0x1cc>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_vidSetPinDir+0x1c8>
 340:	84 2b       	or	r24, r20
 342:	8c 93       	st	X, r24
		}

	  } break;

	}
}
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	cf 91       	pop	r28
 350:	df 91       	pop	r29
 352:	08 95       	ret

00000354 <DIO_vidSetPinval>:

void DIO_vidSetPinval(u8 u8portName, u8 u8pinNo, u8 u8pinVal)
{
 354:	df 93       	push	r29
 356:	cf 93       	push	r28
 358:	00 d0       	rcall	.+0      	; 0x35a <DIO_vidSetPinval+0x6>
 35a:	00 d0       	rcall	.+0      	; 0x35c <DIO_vidSetPinval+0x8>
 35c:	0f 92       	push	r0
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	6a 83       	std	Y+2, r22	; 0x02
 366:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8portName)
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	3d 83       	std	Y+5, r19	; 0x05
 370:	2c 83       	std	Y+4, r18	; 0x04
 372:	8c 81       	ldd	r24, Y+4	; 0x04
 374:	9d 81       	ldd	r25, Y+5	; 0x05
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	91 05       	cpc	r25, r1
 37a:	09 f4       	brne	.+2      	; 0x37e <DIO_vidSetPinval+0x2a>
 37c:	47 c0       	rjmp	.+142    	; 0x40c <DIO_vidSetPinval+0xb8>
 37e:	2c 81       	ldd	r18, Y+4	; 0x04
 380:	3d 81       	ldd	r19, Y+5	; 0x05
 382:	22 30       	cpi	r18, 0x02	; 2
 384:	31 05       	cpc	r19, r1
 386:	2c f4       	brge	.+10     	; 0x392 <DIO_vidSetPinval+0x3e>
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	9d 81       	ldd	r25, Y+5	; 0x05
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	71 f0       	breq	.+28     	; 0x3ac <DIO_vidSetPinval+0x58>
 390:	cb c0       	rjmp	.+406    	; 0x528 <DIO_vidSetPinval+0x1d4>
 392:	2c 81       	ldd	r18, Y+4	; 0x04
 394:	3d 81       	ldd	r19, Y+5	; 0x05
 396:	22 30       	cpi	r18, 0x02	; 2
 398:	31 05       	cpc	r19, r1
 39a:	09 f4       	brne	.+2      	; 0x39e <DIO_vidSetPinval+0x4a>
 39c:	67 c0       	rjmp	.+206    	; 0x46c <DIO_vidSetPinval+0x118>
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	9d 81       	ldd	r25, Y+5	; 0x05
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	91 05       	cpc	r25, r1
 3a6:	09 f4       	brne	.+2      	; 0x3aa <DIO_vidSetPinval+0x56>
 3a8:	91 c0       	rjmp	.+290    	; 0x4cc <DIO_vidSetPinval+0x178>
 3aa:	be c0       	rjmp	.+380    	; 0x528 <DIO_vidSetPinval+0x1d4>
	{
	case PORTA:
	{
		if(u8pinVal == HIGH)
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	a1 f4       	brne	.+40     	; 0x3da <DIO_vidSetPinval+0x86>
		{
			set_bit(PORTA_Register, u8pinNo);
 3b2:	ab e3       	ldi	r26, 0x3B	; 59
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	eb e3       	ldi	r30, 0x3B	; 59
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_vidSetPinval+0x7c>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_vidSetPinval+0x78>
 3d4:	84 2b       	or	r24, r20
 3d6:	8c 93       	st	X, r24
 3d8:	a7 c0       	rjmp	.+334    	; 0x528 <DIO_vidSetPinval+0x1d4>
		}

		else if (u8pinVal == LOW)
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	88 23       	and	r24, r24
 3de:	09 f0       	breq	.+2      	; 0x3e2 <DIO_vidSetPinval+0x8e>
 3e0:	a3 c0       	rjmp	.+326    	; 0x528 <DIO_vidSetPinval+0x1d4>
		{
			clr_bit(PORTA_Register, u8pinNo);
 3e2:	ab e3       	ldi	r26, 0x3B	; 59
 3e4:	b0 e0       	ldi	r27, 0x00	; 0
 3e6:	eb e3       	ldi	r30, 0x3B	; 59
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	48 2f       	mov	r20, r24
 3ee:	8a 81       	ldd	r24, Y+2	; 0x02
 3f0:	28 2f       	mov	r18, r24
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 2e       	mov	r0, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_vidSetPinval+0xac>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_vidSetPinval+0xa8>
 404:	80 95       	com	r24
 406:	84 23       	and	r24, r20
 408:	8c 93       	st	X, r24
 40a:	8e c0       	rjmp	.+284    	; 0x528 <DIO_vidSetPinval+0x1d4>
		}
	}break;

	case PORTB:
	{
		if(u8pinVal == HIGH)
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	a1 f4       	brne	.+40     	; 0x43a <DIO_vidSetPinval+0xe6>
		{
			set_bit(PORTB_Register, u8pinNo);
 412:	a8 e3       	ldi	r26, 0x38	; 56
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	e8 e3       	ldi	r30, 0x38	; 56
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	48 2f       	mov	r20, r24
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 2e       	mov	r0, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_vidSetPinval+0xdc>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_vidSetPinval+0xd8>
 434:	84 2b       	or	r24, r20
 436:	8c 93       	st	X, r24
 438:	77 c0       	rjmp	.+238    	; 0x528 <DIO_vidSetPinval+0x1d4>
		}

		else if (u8pinVal == LOW)
 43a:	8b 81       	ldd	r24, Y+3	; 0x03
 43c:	88 23       	and	r24, r24
 43e:	09 f0       	breq	.+2      	; 0x442 <DIO_vidSetPinval+0xee>
 440:	73 c0       	rjmp	.+230    	; 0x528 <DIO_vidSetPinval+0x1d4>
		{
			clr_bit(PORTB_Register, u8pinNo);
 442:	a8 e3       	ldi	r26, 0x38	; 56
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e8 e3       	ldi	r30, 0x38	; 56
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	48 2f       	mov	r20, r24
 44e:	8a 81       	ldd	r24, Y+2	; 0x02
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 2e       	mov	r0, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_vidSetPinval+0x10c>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_vidSetPinval+0x108>
 464:	80 95       	com	r24
 466:	84 23       	and	r24, r20
 468:	8c 93       	st	X, r24
 46a:	5e c0       	rjmp	.+188    	; 0x528 <DIO_vidSetPinval+0x1d4>
		}
	}break;

	case PORTC:
	{
		if(u8pinVal == HIGH)
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	a1 f4       	brne	.+40     	; 0x49a <DIO_vidSetPinval+0x146>
		{
			set_bit(PORTC_Register, u8pinNo);
 472:	a5 e3       	ldi	r26, 0x35	; 53
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	e5 e3       	ldi	r30, 0x35	; 53
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	48 2f       	mov	r20, r24
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 2e       	mov	r0, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_vidSetPinval+0x13c>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_vidSetPinval+0x138>
 494:	84 2b       	or	r24, r20
 496:	8c 93       	st	X, r24
 498:	47 c0       	rjmp	.+142    	; 0x528 <DIO_vidSetPinval+0x1d4>
		}

		else if (u8pinVal == LOW)
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	88 23       	and	r24, r24
 49e:	09 f0       	breq	.+2      	; 0x4a2 <DIO_vidSetPinval+0x14e>
 4a0:	43 c0       	rjmp	.+134    	; 0x528 <DIO_vidSetPinval+0x1d4>
		{
			clr_bit(PORTC_Register, u8pinNo);
 4a2:	a5 e3       	ldi	r26, 0x35	; 53
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	e5 e3       	ldi	r30, 0x35	; 53
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	48 2f       	mov	r20, r24
 4ae:	8a 81       	ldd	r24, Y+2	; 0x02
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 2e       	mov	r0, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_vidSetPinval+0x16c>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_vidSetPinval+0x168>
 4c4:	80 95       	com	r24
 4c6:	84 23       	and	r24, r20
 4c8:	8c 93       	st	X, r24
 4ca:	2e c0       	rjmp	.+92     	; 0x528 <DIO_vidSetPinval+0x1d4>
		}
	}break;

	case PORTD:
	{
		if(u8pinVal == HIGH)
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	a1 f4       	brne	.+40     	; 0x4fa <DIO_vidSetPinval+0x1a6>
		{
			set_bit(PORTD_Register, u8pinNo);
 4d2:	a2 e3       	ldi	r26, 0x32	; 50
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	e2 e3       	ldi	r30, 0x32	; 50
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	48 2f       	mov	r20, r24
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 2e       	mov	r0, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_vidSetPinval+0x19c>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 94       	dec	r0
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_vidSetPinval+0x198>
 4f4:	84 2b       	or	r24, r20
 4f6:	8c 93       	st	X, r24
 4f8:	17 c0       	rjmp	.+46     	; 0x528 <DIO_vidSetPinval+0x1d4>
		}

		else if (u8pinVal == LOW)
 4fa:	8b 81       	ldd	r24, Y+3	; 0x03
 4fc:	88 23       	and	r24, r24
 4fe:	a1 f4       	brne	.+40     	; 0x528 <DIO_vidSetPinval+0x1d4>
		{
			clr_bit(PORTD_Register, u8pinNo);
 500:	a2 e3       	ldi	r26, 0x32	; 50
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	e2 e3       	ldi	r30, 0x32	; 50
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	48 2f       	mov	r20, r24
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 2e       	mov	r0, r18
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_vidSetPinval+0x1ca>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	0a 94       	dec	r0
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_vidSetPinval+0x1c6>
 522:	80 95       	com	r24
 524:	84 23       	and	r24, r20
 526:	8c 93       	st	X, r24
		}
	}break;
	}
}
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	0f 90       	pop	r0
 532:	cf 91       	pop	r28
 534:	df 91       	pop	r29
 536:	08 95       	ret

00000538 <DIO_u8GetPinaValue>:

u8 DIO_u8GetPinaValue(u8 u8portName,u8 u8pinNo)
{
 538:	df 93       	push	r29
 53a:	cf 93       	push	r28
 53c:	00 d0       	rcall	.+0      	; 0x53e <DIO_u8GetPinaValue+0x6>
 53e:	00 d0       	rcall	.+0      	; 0x540 <DIO_u8GetPinaValue+0x8>
 540:	0f 92       	push	r0
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	8a 83       	std	Y+2, r24	; 0x02
 548:	6b 83       	std	Y+3, r22	; 0x03
  u8 value;
  switch(u8portName)
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	3d 83       	std	Y+5, r19	; 0x05
 552:	2c 83       	std	Y+4, r18	; 0x04
 554:	4c 81       	ldd	r20, Y+4	; 0x04
 556:	5d 81       	ldd	r21, Y+5	; 0x05
 558:	41 30       	cpi	r20, 0x01	; 1
 55a:	51 05       	cpc	r21, r1
 55c:	41 f1       	breq	.+80     	; 0x5ae <DIO_u8GetPinaValue+0x76>
 55e:	8c 81       	ldd	r24, Y+4	; 0x04
 560:	9d 81       	ldd	r25, Y+5	; 0x05
 562:	82 30       	cpi	r24, 0x02	; 2
 564:	91 05       	cpc	r25, r1
 566:	34 f4       	brge	.+12     	; 0x574 <DIO_u8GetPinaValue+0x3c>
 568:	2c 81       	ldd	r18, Y+4	; 0x04
 56a:	3d 81       	ldd	r19, Y+5	; 0x05
 56c:	21 15       	cp	r18, r1
 56e:	31 05       	cpc	r19, r1
 570:	61 f0       	breq	.+24     	; 0x58a <DIO_u8GetPinaValue+0x52>
 572:	52 c0       	rjmp	.+164    	; 0x618 <DIO_u8GetPinaValue+0xe0>
 574:	4c 81       	ldd	r20, Y+4	; 0x04
 576:	5d 81       	ldd	r21, Y+5	; 0x05
 578:	42 30       	cpi	r20, 0x02	; 2
 57a:	51 05       	cpc	r21, r1
 57c:	51 f1       	breq	.+84     	; 0x5d2 <DIO_u8GetPinaValue+0x9a>
 57e:	8c 81       	ldd	r24, Y+4	; 0x04
 580:	9d 81       	ldd	r25, Y+5	; 0x05
 582:	83 30       	cpi	r24, 0x03	; 3
 584:	91 05       	cpc	r25, r1
 586:	b9 f1       	breq	.+110    	; 0x5f6 <DIO_u8GetPinaValue+0xbe>
 588:	47 c0       	rjmp	.+142    	; 0x618 <DIO_u8GetPinaValue+0xe0>
  {
  	  case PORTA:
  	  {
  		 value = get_bit(PINA_Register, u8pinNo);
 58a:	e9 e3       	ldi	r30, 0x39	; 57
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	a9 01       	movw	r20, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_u8GetPinaValue+0x6a>
 59e:	55 95       	asr	r21
 5a0:	47 95       	ror	r20
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_u8GetPinaValue+0x66>
 5a6:	ca 01       	movw	r24, r20
 5a8:	81 70       	andi	r24, 0x01	; 1
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	35 c0       	rjmp	.+106    	; 0x618 <DIO_u8GetPinaValue+0xe0>
  	  }break;

  	case PORTB:
  	  	  {
  	  		 value = get_bit(PINB_Register, u8pinNo);
 5ae:	e6 e3       	ldi	r30, 0x36	; 54
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	28 2f       	mov	r18, r24
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	88 2f       	mov	r24, r24
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	a9 01       	movw	r20, r18
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_u8GetPinaValue+0x8e>
 5c2:	55 95       	asr	r21
 5c4:	47 95       	ror	r20
 5c6:	8a 95       	dec	r24
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_u8GetPinaValue+0x8a>
 5ca:	ca 01       	movw	r24, r20
 5cc:	81 70       	andi	r24, 0x01	; 1
 5ce:	89 83       	std	Y+1, r24	; 0x01
 5d0:	23 c0       	rjmp	.+70     	; 0x618 <DIO_u8GetPinaValue+0xe0>
  	  	  }break;

  	case PORTC:
  	  	  {
  	  		 value = get_bit(PINC_Register, u8pinNo);
 5d2:	e3 e3       	ldi	r30, 0x33	; 51
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	28 2f       	mov	r18, r24
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	8b 81       	ldd	r24, Y+3	; 0x03
 5de:	88 2f       	mov	r24, r24
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	a9 01       	movw	r20, r18
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_u8GetPinaValue+0xb2>
 5e6:	55 95       	asr	r21
 5e8:	47 95       	ror	r20
 5ea:	8a 95       	dec	r24
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_u8GetPinaValue+0xae>
 5ee:	ca 01       	movw	r24, r20
 5f0:	81 70       	andi	r24, 0x01	; 1
 5f2:	89 83       	std	Y+1, r24	; 0x01
 5f4:	11 c0       	rjmp	.+34     	; 0x618 <DIO_u8GetPinaValue+0xe0>
  	  	  }break;

	case PORTD:
  	  	  {
  	  		 value = get_bit(PIND_Register, u8pinNo);
 5f6:	e0 e3       	ldi	r30, 0x30	; 48
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	8b 81       	ldd	r24, Y+3	; 0x03
 602:	88 2f       	mov	r24, r24
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	a9 01       	movw	r20, r18
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_u8GetPinaValue+0xd6>
 60a:	55 95       	asr	r21
 60c:	47 95       	ror	r20
 60e:	8a 95       	dec	r24
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_u8GetPinaValue+0xd2>
 612:	ca 01       	movw	r24, r20
 614:	81 70       	andi	r24, 0x01	; 1
 616:	89 83       	std	Y+1, r24	; 0x01
  	  	  }break;

  }
  return value;
 618:	89 81       	ldd	r24, Y+1	; 0x01
}
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	0f 90       	pop	r0
 624:	cf 91       	pop	r28
 626:	df 91       	pop	r29
 628:	08 95       	ret

0000062a <main>:

void int_WatchDog(void);
void enable(void);

void main(main)
{
 62a:	df 93       	push	r29
 62c:	cf 93       	push	r28
 62e:	00 d0       	rcall	.+0      	; 0x630 <main+0x6>
 630:	cd b7       	in	r28, 0x3d	; 61
 632:	de b7       	in	r29, 0x3e	; 62
 634:	9a 83       	std	Y+2, r25	; 0x02
 636:	89 83       	std	Y+1, r24	; 0x01
  DIO_vidSetPinDir(PORTC,0,1);
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	41 e0       	ldi	r20, 0x01	; 1
 63e:	0e 94 b8 00 	call	0x170	; 0x170 <DIO_vidSetPinDir>
  enable();
 642:	0e 94 47 03 	call	0x68e	; 0x68e <enable>

  while(1)
  {
	  DIO_vidSetPinval(PORTC,0,1);
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	41 e0       	ldi	r20, 0x01	; 1
 64c:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_vidSetPinval>
	  int_WatchDog();
 650:	0e 94 2b 03 	call	0x656	; 0x656 <int_WatchDog>
 654:	f8 cf       	rjmp	.-16     	; 0x646 <main+0x1c>

00000656 <int_WatchDog>:
  }

}

void int_WatchDog(void)
{
 656:	df 93       	push	r29
 658:	cf 93       	push	r28
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
	set_bit(WDTCR,0);
 65e:	a1 e4       	ldi	r26, 0x41	; 65
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	e1 e4       	ldi	r30, 0x41	; 65
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	81 60       	ori	r24, 0x01	; 1
 66a:	8c 93       	st	X, r24
	set_bit(WDTCR,1);
 66c:	a1 e4       	ldi	r26, 0x41	; 65
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	e1 e4       	ldi	r30, 0x41	; 65
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	82 60       	ori	r24, 0x02	; 2
 678:	8c 93       	st	X, r24
	set_bit(WDTCR,2);
 67a:	a1 e4       	ldi	r26, 0x41	; 65
 67c:	b0 e0       	ldi	r27, 0x00	; 0
 67e:	e1 e4       	ldi	r30, 0x41	; 65
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	84 60       	ori	r24, 0x04	; 4
 686:	8c 93       	st	X, r24

}
 688:	cf 91       	pop	r28
 68a:	df 91       	pop	r29
 68c:	08 95       	ret

0000068e <enable>:

void enable(void)
{
 68e:	df 93       	push	r29
 690:	cf 93       	push	r28
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
	set_bit(WDTCR,3);
 696:	a1 e4       	ldi	r26, 0x41	; 65
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	e1 e4       	ldi	r30, 0x41	; 65
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	88 60       	ori	r24, 0x08	; 8
 6a2:	8c 93       	st	X, r24
	set_bit(WDTCR,4);
 6a4:	a1 e4       	ldi	r26, 0x41	; 65
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	e1 e4       	ldi	r30, 0x41	; 65
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	80 61       	ori	r24, 0x10	; 16
 6b0:	8c 93       	st	X, r24
}
 6b2:	cf 91       	pop	r28
 6b4:	df 91       	pop	r29
 6b6:	08 95       	ret

000006b8 <_exit>:
 6b8:	f8 94       	cli

000006ba <__stop_program>:
 6ba:	ff cf       	rjmp	.-2      	; 0x6ba <__stop_program>
