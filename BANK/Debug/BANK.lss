
BANK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000208c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000208c  00002100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001950  00000000  00000000  0000211c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ac0  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000452c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000466c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000047dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006425  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007310  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000080c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000084ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008c7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <main>
      7a:	0c 94 44 10 	jmp	0x2088	; 0x2088 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 35 10 	jmp	0x206a	; 0x206a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_vidSetPortDir>:
#include "DIO.h"
#include "../Functions.h"


void DIO_vidSetPortDir(u8 u8PortName, u8 u8PortDir)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_vidSetPortDir+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_vidSetPortDir+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortName)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	3c 83       	std	Y+4, r19	; 0x04
     b4e:	2b 83       	std	Y+3, r18	; 0x03
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	91 05       	cpc	r25, r1
     b58:	d1 f0       	breq	.+52     	; 0xb8e <DIO_vidSetPortDir+0x58>
     b5a:	2b 81       	ldd	r18, Y+3	; 0x03
     b5c:	3c 81       	ldd	r19, Y+4	; 0x04
     b5e:	22 30       	cpi	r18, 0x02	; 2
     b60:	31 05       	cpc	r19, r1
     b62:	2c f4       	brge	.+10     	; 0xb6e <DIO_vidSetPortDir+0x38>
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	61 f0       	breq	.+24     	; 0xb84 <DIO_vidSetPortDir+0x4e>
     b6c:	1e c0       	rjmp	.+60     	; 0xbaa <DIO_vidSetPortDir+0x74>
     b6e:	2b 81       	ldd	r18, Y+3	; 0x03
     b70:	3c 81       	ldd	r19, Y+4	; 0x04
     b72:	22 30       	cpi	r18, 0x02	; 2
     b74:	31 05       	cpc	r19, r1
     b76:	81 f0       	breq	.+32     	; 0xb98 <DIO_vidSetPortDir+0x62>
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	83 30       	cpi	r24, 0x03	; 3
     b7e:	91 05       	cpc	r25, r1
     b80:	81 f0       	breq	.+32     	; 0xba2 <DIO_vidSetPortDir+0x6c>
     b82:	13 c0       	rjmp	.+38     	; 0xbaa <DIO_vidSetPortDir+0x74>
	{
	  case PORTA:
	  {
		  DDRA_Register = u8PortDir ;
     b84:	ea e3       	ldi	r30, 0x3A	; 58
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	80 83       	st	Z, r24
     b8c:	0e c0       	rjmp	.+28     	; 0xbaa <DIO_vidSetPortDir+0x74>

	  }break ;
	  case PORTB:
	  {
		  DDRB_Register = u8PortDir ;
     b8e:	e7 e3       	ldi	r30, 0x37	; 55
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	80 83       	st	Z, r24
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <DIO_vidSetPortDir+0x74>

	  }break ;
	  case PORTC:
	  {
		  DDRC_Register = u8PortDir ;
     b98:	e4 e3       	ldi	r30, 0x34	; 52
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	80 83       	st	Z, r24
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <DIO_vidSetPortDir+0x74>

	  }break ;
	  case PORTD:
	  {
		  DDRD_Register = u8PortDir ;
     ba2:	e1 e3       	ldi	r30, 0x31	; 49
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	80 83       	st	Z, r24
	  }
	  break ;
	  default: /* Wrong Port ID */        break;
	}

}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <DIO_vidSetPortVal>:

void DIO_vidSetPortVal(u8 u8PortName,u8 u8PortVal)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <DIO_vidSetPortVal+0x6>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <DIO_vidSetPortVal+0x8>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	6a 83       	std	Y+2, r22	; 0x02
	switch (u8PortName)
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	3c 83       	std	Y+4, r19	; 0x04
     bd0:	2b 83       	std	Y+3, r18	; 0x03
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	d1 f0       	breq	.+52     	; 0xc10 <DIO_vidSetPortVal+0x58>
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	2c f4       	brge	.+10     	; 0xbf0 <DIO_vidSetPortVal+0x38>
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	61 f0       	breq	.+24     	; 0xc06 <DIO_vidSetPortVal+0x4e>
     bee:	1e c0       	rjmp	.+60     	; 0xc2c <DIO_vidSetPortVal+0x74>
     bf0:	2b 81       	ldd	r18, Y+3	; 0x03
     bf2:	3c 81       	ldd	r19, Y+4	; 0x04
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	31 05       	cpc	r19, r1
     bf8:	81 f0       	breq	.+32     	; 0xc1a <DIO_vidSetPortVal+0x62>
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	91 05       	cpc	r25, r1
     c02:	81 f0       	breq	.+32     	; 0xc24 <DIO_vidSetPortVal+0x6c>
     c04:	13 c0       	rjmp	.+38     	; 0xc2c <DIO_vidSetPortVal+0x74>
	{
	case PORTA :
		{
		PORTA_Register = u8PortVal;
     c06:	eb e3       	ldi	r30, 0x3B	; 59
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	80 83       	st	Z, r24
     c0e:	0e c0       	rjmp	.+28     	; 0xc2c <DIO_vidSetPortVal+0x74>
		}break;

	case PORTB :
		{
		PORTB_Register = u8PortVal;
     c10:	e8 e3       	ldi	r30, 0x38	; 56
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	80 83       	st	Z, r24
     c18:	09 c0       	rjmp	.+18     	; 0xc2c <DIO_vidSetPortVal+0x74>
		}break;

	case PORTC :
		{
		PORTC_Register = u8PortVal;
     c1a:	e5 e3       	ldi	r30, 0x35	; 53
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	80 83       	st	Z, r24
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <DIO_vidSetPortVal+0x74>
		}break;

		case PORTD :
		{
		PORTD_Register = u8PortVal;
     c24:	e2 e3       	ldi	r30, 0x32	; 50
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	80 83       	st	Z, r24
		}break;

		default: /* Wrong Port ID */        break;
	}
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <DIO_vidSetPinDir>:

void DIO_vidSetPinDir(u8 u8PortName, u8 u8PinNo, u8 u8PinDir)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <DIO_vidSetPinDir+0x6>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <DIO_vidSetPinDir+0x8>
     c42:	0f 92       	push	r0
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	6a 83       	std	Y+2, r22	; 0x02
     c4c:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8PortName)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3d 83       	std	Y+5, r19	; 0x05
     c56:	2c 83       	std	Y+4, r18	; 0x04
     c58:	8c 81       	ldd	r24, Y+4	; 0x04
     c5a:	9d 81       	ldd	r25, Y+5	; 0x05
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	09 f4       	brne	.+2      	; 0xc64 <DIO_vidSetPinDir+0x2a>
     c62:	47 c0       	rjmp	.+142    	; 0xcf2 <DIO_vidSetPinDir+0xb8>
     c64:	2c 81       	ldd	r18, Y+4	; 0x04
     c66:	3d 81       	ldd	r19, Y+5	; 0x05
     c68:	22 30       	cpi	r18, 0x02	; 2
     c6a:	31 05       	cpc	r19, r1
     c6c:	2c f4       	brge	.+10     	; 0xc78 <DIO_vidSetPinDir+0x3e>
     c6e:	8c 81       	ldd	r24, Y+4	; 0x04
     c70:	9d 81       	ldd	r25, Y+5	; 0x05
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	71 f0       	breq	.+28     	; 0xc92 <DIO_vidSetPinDir+0x58>
     c76:	cb c0       	rjmp	.+406    	; 0xe0e <DIO_vidSetPinDir+0x1d4>
     c78:	2c 81       	ldd	r18, Y+4	; 0x04
     c7a:	3d 81       	ldd	r19, Y+5	; 0x05
     c7c:	22 30       	cpi	r18, 0x02	; 2
     c7e:	31 05       	cpc	r19, r1
     c80:	09 f4       	brne	.+2      	; 0xc84 <DIO_vidSetPinDir+0x4a>
     c82:	67 c0       	rjmp	.+206    	; 0xd52 <DIO_vidSetPinDir+0x118>
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	9d 81       	ldd	r25, Y+5	; 0x05
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	91 05       	cpc	r25, r1
     c8c:	09 f4       	brne	.+2      	; 0xc90 <DIO_vidSetPinDir+0x56>
     c8e:	91 c0       	rjmp	.+290    	; 0xdb2 <DIO_vidSetPinDir+0x178>
     c90:	be c0       	rjmp	.+380    	; 0xe0e <DIO_vidSetPinDir+0x1d4>
	{
	  case PORTA :
	  {
		if(u8PinDir == PORTDIR_INPUT)
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	88 23       	and	r24, r24
     c96:	a9 f4       	brne	.+42     	; 0xcc2 <DIO_vidSetPinDir+0x88>
		{
		  clr_bit(DDRA_Register,u8PinNo);
     c98:	aa e3       	ldi	r26, 0x3A	; 58
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	ea e3       	ldi	r30, 0x3A	; 58
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	48 2f       	mov	r20, r24
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 2e       	mov	r0, r18
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <DIO_vidSetPinDir+0x7c>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <DIO_vidSetPinDir+0x78>
     cba:	80 95       	com	r24
     cbc:	84 23       	and	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	a6 c0       	rjmp	.+332    	; 0xe0e <DIO_vidSetPinDir+0x1d4>
		}

		else if (u8PinDir == PORTDIR_OUTPUT)
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	8f 3f       	cpi	r24, 0xFF	; 255
     cc6:	09 f0       	breq	.+2      	; 0xcca <DIO_vidSetPinDir+0x90>
     cc8:	a2 c0       	rjmp	.+324    	; 0xe0e <DIO_vidSetPinDir+0x1d4>
		{
			set_bit(DDRA_Register, u8PinNo)	;
     cca:	aa e3       	ldi	r26, 0x3A	; 58
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	ea e3       	ldi	r30, 0x3A	; 58
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_vidSetPinDir+0xae>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_vidSetPinDir+0xaa>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	8e c0       	rjmp	.+284    	; 0xe0e <DIO_vidSetPinDir+0x1d4>

	  } break;

	  case PORTB :
	  {
		if(u8PinDir == PORTDIR_INPUT)
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	88 23       	and	r24, r24
     cf6:	a9 f4       	brne	.+42     	; 0xd22 <DIO_vidSetPinDir+0xe8>
		{
		  clr_bit(DDRB_Register,u8PinNo);
     cf8:	a7 e3       	ldi	r26, 0x37	; 55
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e7 e3       	ldi	r30, 0x37	; 55
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	48 2f       	mov	r20, r24
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 2e       	mov	r0, r18
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <DIO_vidSetPinDir+0xdc>
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <DIO_vidSetPinDir+0xd8>
     d1a:	80 95       	com	r24
     d1c:	84 23       	and	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	76 c0       	rjmp	.+236    	; 0xe0e <DIO_vidSetPinDir+0x1d4>
		}

		else if (u8PinDir == PORTDIR_OUTPUT)
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	8f 3f       	cpi	r24, 0xFF	; 255
     d26:	09 f0       	breq	.+2      	; 0xd2a <DIO_vidSetPinDir+0xf0>
     d28:	72 c0       	rjmp	.+228    	; 0xe0e <DIO_vidSetPinDir+0x1d4>
		{
			set_bit(DDRB_Register, u8PinNo)	;
     d2a:	a7 e3       	ldi	r26, 0x37	; 55
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e3       	ldi	r30, 0x37	; 55
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_vidSetPinDir+0x10e>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_vidSetPinDir+0x10a>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	5e c0       	rjmp	.+188    	; 0xe0e <DIO_vidSetPinDir+0x1d4>

	  } break;

	  case PORTC :
	  {
		if(u8PinDir == PORTDIR_INPUT)
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	88 23       	and	r24, r24
     d56:	a9 f4       	brne	.+42     	; 0xd82 <DIO_vidSetPinDir+0x148>
		{
		  clr_bit(DDRC_Register,u8PinNo);
     d58:	a4 e3       	ldi	r26, 0x34	; 52
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e4 e3       	ldi	r30, 0x34	; 52
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 2e       	mov	r0, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <DIO_vidSetPinDir+0x13c>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <DIO_vidSetPinDir+0x138>
     d7a:	80 95       	com	r24
     d7c:	84 23       	and	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	46 c0       	rjmp	.+140    	; 0xe0e <DIO_vidSetPinDir+0x1d4>
		}

		else if (u8PinDir == PORTDIR_OUTPUT)
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	8f 3f       	cpi	r24, 0xFF	; 255
     d86:	09 f0       	breq	.+2      	; 0xd8a <DIO_vidSetPinDir+0x150>
     d88:	42 c0       	rjmp	.+132    	; 0xe0e <DIO_vidSetPinDir+0x1d4>
		{
			set_bit(DDRC_Register, u8PinNo)	;
     d8a:	a4 e3       	ldi	r26, 0x34	; 52
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e4 e3       	ldi	r30, 0x34	; 52
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_vidSetPinDir+0x16e>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_vidSetPinDir+0x16a>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	2e c0       	rjmp	.+92     	; 0xe0e <DIO_vidSetPinDir+0x1d4>

	  } break;

	  case PORTD :
	  {
		if(u8PinDir == PORTDIR_INPUT)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	88 23       	and	r24, r24
     db6:	a9 f4       	brne	.+42     	; 0xde2 <DIO_vidSetPinDir+0x1a8>
		{
		  clr_bit(DDRD_Register,u8PinNo);
     db8:	a1 e3       	ldi	r26, 0x31	; 49
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e1 e3       	ldi	r30, 0x31	; 49
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_vidSetPinDir+0x19c>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_vidSetPinDir+0x198>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	16 c0       	rjmp	.+44     	; 0xe0e <DIO_vidSetPinDir+0x1d4>
		}

		else if (u8PinDir == PORTDIR_OUTPUT)
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	8f 3f       	cpi	r24, 0xFF	; 255
     de6:	99 f4       	brne	.+38     	; 0xe0e <DIO_vidSetPinDir+0x1d4>
		{
			set_bit(DDRD_Register, u8PinNo)	;
     de8:	a1 e3       	ldi	r26, 0x31	; 49
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e1 e3       	ldi	r30, 0x31	; 49
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_vidSetPinDir+0x1cc>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_vidSetPinDir+0x1c8>
     e0a:	84 2b       	or	r24, r20
     e0c:	8c 93       	st	X, r24
		}

	  } break;

	}
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <DIO_vidSetPinval>:

void DIO_vidSetPinval(u8 u8portName, u8 u8pinNo, u8 u8pinVal)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <DIO_vidSetPinval+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <DIO_vidSetPinval+0x8>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	6a 83       	std	Y+2, r22	; 0x02
     e30:	4b 83       	std	Y+3, r20	; 0x03
	switch(u8portName)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	3d 83       	std	Y+5, r19	; 0x05
     e3a:	2c 83       	std	Y+4, r18	; 0x04
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <DIO_vidSetPinval+0x2a>
     e46:	47 c0       	rjmp	.+142    	; 0xed6 <DIO_vidSetPinval+0xb8>
     e48:	2c 81       	ldd	r18, Y+4	; 0x04
     e4a:	3d 81       	ldd	r19, Y+5	; 0x05
     e4c:	22 30       	cpi	r18, 0x02	; 2
     e4e:	31 05       	cpc	r19, r1
     e50:	2c f4       	brge	.+10     	; 0xe5c <DIO_vidSetPinval+0x3e>
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	71 f0       	breq	.+28     	; 0xe76 <DIO_vidSetPinval+0x58>
     e5a:	cb c0       	rjmp	.+406    	; 0xff2 <DIO_vidSetPinval+0x1d4>
     e5c:	2c 81       	ldd	r18, Y+4	; 0x04
     e5e:	3d 81       	ldd	r19, Y+5	; 0x05
     e60:	22 30       	cpi	r18, 0x02	; 2
     e62:	31 05       	cpc	r19, r1
     e64:	09 f4       	brne	.+2      	; 0xe68 <DIO_vidSetPinval+0x4a>
     e66:	67 c0       	rjmp	.+206    	; 0xf36 <DIO_vidSetPinval+0x118>
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	83 30       	cpi	r24, 0x03	; 3
     e6e:	91 05       	cpc	r25, r1
     e70:	09 f4       	brne	.+2      	; 0xe74 <DIO_vidSetPinval+0x56>
     e72:	91 c0       	rjmp	.+290    	; 0xf96 <DIO_vidSetPinval+0x178>
     e74:	be c0       	rjmp	.+380    	; 0xff2 <DIO_vidSetPinval+0x1d4>
	{
	case PORTA:
	{
		if(u8pinVal == HIGH)
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	a1 f4       	brne	.+40     	; 0xea4 <DIO_vidSetPinval+0x86>
		{
			set_bit(PORTA_Register, u8pinNo);
     e7c:	ab e3       	ldi	r26, 0x3B	; 59
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	eb e3       	ldi	r30, 0x3B	; 59
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_vidSetPinval+0x7c>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_vidSetPinval+0x78>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	a7 c0       	rjmp	.+334    	; 0xff2 <DIO_vidSetPinval+0x1d4>
		}

		else if (u8pinVal == LOW)
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	88 23       	and	r24, r24
     ea8:	09 f0       	breq	.+2      	; 0xeac <DIO_vidSetPinval+0x8e>
     eaa:	a3 c0       	rjmp	.+326    	; 0xff2 <DIO_vidSetPinval+0x1d4>
		{
			clr_bit(PORTA_Register, u8pinNo);
     eac:	ab e3       	ldi	r26, 0x3B	; 59
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	eb e3       	ldi	r30, 0x3B	; 59
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_vidSetPinval+0xac>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_vidSetPinval+0xa8>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	8e c0       	rjmp	.+284    	; 0xff2 <DIO_vidSetPinval+0x1d4>
		}
	}break;

	case PORTB:
	{
		if(u8pinVal == HIGH)
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	a1 f4       	brne	.+40     	; 0xf04 <DIO_vidSetPinval+0xe6>
		{
			set_bit(PORTB_Register, u8pinNo);
     edc:	a8 e3       	ldi	r26, 0x38	; 56
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 e3       	ldi	r30, 0x38	; 56
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_vidSetPinval+0xdc>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_vidSetPinval+0xd8>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	77 c0       	rjmp	.+238    	; 0xff2 <DIO_vidSetPinval+0x1d4>
		}

		else if (u8pinVal == LOW)
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	88 23       	and	r24, r24
     f08:	09 f0       	breq	.+2      	; 0xf0c <DIO_vidSetPinval+0xee>
     f0a:	73 c0       	rjmp	.+230    	; 0xff2 <DIO_vidSetPinval+0x1d4>
		{
			clr_bit(PORTB_Register, u8pinNo);
     f0c:	a8 e3       	ldi	r26, 0x38	; 56
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e8 e3       	ldi	r30, 0x38	; 56
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_vidSetPinval+0x10c>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_vidSetPinval+0x108>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	5e c0       	rjmp	.+188    	; 0xff2 <DIO_vidSetPinval+0x1d4>
		}
	}break;

	case PORTC:
	{
		if(u8pinVal == HIGH)
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	a1 f4       	brne	.+40     	; 0xf64 <DIO_vidSetPinval+0x146>
		{
			set_bit(PORTC_Register, u8pinNo);
     f3c:	a5 e3       	ldi	r26, 0x35	; 53
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e5 e3       	ldi	r30, 0x35	; 53
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_vidSetPinval+0x13c>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_vidSetPinval+0x138>
     f5e:	84 2b       	or	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	47 c0       	rjmp	.+142    	; 0xff2 <DIO_vidSetPinval+0x1d4>
		}

		else if (u8pinVal == LOW)
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	88 23       	and	r24, r24
     f68:	09 f0       	breq	.+2      	; 0xf6c <DIO_vidSetPinval+0x14e>
     f6a:	43 c0       	rjmp	.+134    	; 0xff2 <DIO_vidSetPinval+0x1d4>
		{
			clr_bit(PORTC_Register, u8pinNo);
     f6c:	a5 e3       	ldi	r26, 0x35	; 53
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e5 e3       	ldi	r30, 0x35	; 53
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_vidSetPinval+0x16c>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_vidSetPinval+0x168>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	2e c0       	rjmp	.+92     	; 0xff2 <DIO_vidSetPinval+0x1d4>
		}
	}break;

	case PORTD:
	{
		if(u8pinVal == HIGH)
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	a1 f4       	brne	.+40     	; 0xfc4 <DIO_vidSetPinval+0x1a6>
		{
			set_bit(PORTD_Register, u8pinNo);
     f9c:	a2 e3       	ldi	r26, 0x32	; 50
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e2 e3       	ldi	r30, 0x32	; 50
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_vidSetPinval+0x19c>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_vidSetPinval+0x198>
     fbe:	84 2b       	or	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	17 c0       	rjmp	.+46     	; 0xff2 <DIO_vidSetPinval+0x1d4>
		}

		else if (u8pinVal == LOW)
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	88 23       	and	r24, r24
     fc8:	a1 f4       	brne	.+40     	; 0xff2 <DIO_vidSetPinval+0x1d4>
		{
			clr_bit(PORTD_Register, u8pinNo);
     fca:	a2 e3       	ldi	r26, 0x32	; 50
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e2 e3       	ldi	r30, 0x32	; 50
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_vidSetPinval+0x1ca>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_vidSetPinval+0x1c6>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
		}
	}break;
	}
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <DIO_u8GetPinaValue>:

u8 DIO_u8GetPinaValue(u8 u8portName,u8 u8pinNo)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <DIO_u8GetPinaValue+0x6>
    1008:	00 d0       	rcall	.+0      	; 0x100a <DIO_u8GetPinaValue+0x8>
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	6b 83       	std	Y+3, r22	; 0x03
  u8 value;
  switch(u8portName)
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	3d 83       	std	Y+5, r19	; 0x05
    101c:	2c 83       	std	Y+4, r18	; 0x04
    101e:	4c 81       	ldd	r20, Y+4	; 0x04
    1020:	5d 81       	ldd	r21, Y+5	; 0x05
    1022:	41 30       	cpi	r20, 0x01	; 1
    1024:	51 05       	cpc	r21, r1
    1026:	41 f1       	breq	.+80     	; 0x1078 <DIO_u8GetPinaValue+0x76>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	91 05       	cpc	r25, r1
    1030:	34 f4       	brge	.+12     	; 0x103e <DIO_u8GetPinaValue+0x3c>
    1032:	2c 81       	ldd	r18, Y+4	; 0x04
    1034:	3d 81       	ldd	r19, Y+5	; 0x05
    1036:	21 15       	cp	r18, r1
    1038:	31 05       	cpc	r19, r1
    103a:	61 f0       	breq	.+24     	; 0x1054 <DIO_u8GetPinaValue+0x52>
    103c:	52 c0       	rjmp	.+164    	; 0x10e2 <DIO_u8GetPinaValue+0xe0>
    103e:	4c 81       	ldd	r20, Y+4	; 0x04
    1040:	5d 81       	ldd	r21, Y+5	; 0x05
    1042:	42 30       	cpi	r20, 0x02	; 2
    1044:	51 05       	cpc	r21, r1
    1046:	51 f1       	breq	.+84     	; 0x109c <DIO_u8GetPinaValue+0x9a>
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	91 05       	cpc	r25, r1
    1050:	b9 f1       	breq	.+110    	; 0x10c0 <DIO_u8GetPinaValue+0xbe>
    1052:	47 c0       	rjmp	.+142    	; 0x10e2 <DIO_u8GetPinaValue+0xe0>
  {
  	  case PORTA:
  	  {
  		 value = get_bit(PINA_Register, u8pinNo);
    1054:	e9 e3       	ldi	r30, 0x39	; 57
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a9 01       	movw	r20, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_u8GetPinaValue+0x6a>
    1068:	55 95       	asr	r21
    106a:	47 95       	ror	r20
    106c:	8a 95       	dec	r24
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_u8GetPinaValue+0x66>
    1070:	ca 01       	movw	r24, r20
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	35 c0       	rjmp	.+106    	; 0x10e2 <DIO_u8GetPinaValue+0xe0>
  	  }break;

  	case PORTB:
  	  	  {
  	  		 value = get_bit(PINB_Register, u8pinNo);
    1078:	e6 e3       	ldi	r30, 0x36	; 54
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a9 01       	movw	r20, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_u8GetPinaValue+0x8e>
    108c:	55 95       	asr	r21
    108e:	47 95       	ror	r20
    1090:	8a 95       	dec	r24
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_u8GetPinaValue+0x8a>
    1094:	ca 01       	movw	r24, r20
    1096:	81 70       	andi	r24, 0x01	; 1
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	23 c0       	rjmp	.+70     	; 0x10e2 <DIO_u8GetPinaValue+0xe0>
  	  	  }break;

  	case PORTC:
  	  	  {
  	  		 value = get_bit(PINC_Register, u8pinNo);
    109c:	e3 e3       	ldi	r30, 0x33	; 51
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a9 01       	movw	r20, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_u8GetPinaValue+0xb2>
    10b0:	55 95       	asr	r21
    10b2:	47 95       	ror	r20
    10b4:	8a 95       	dec	r24
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_u8GetPinaValue+0xae>
    10b8:	ca 01       	movw	r24, r20
    10ba:	81 70       	andi	r24, 0x01	; 1
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	11 c0       	rjmp	.+34     	; 0x10e2 <DIO_u8GetPinaValue+0xe0>
  	  	  }break;

	case PORTD:
  	  	  {
  	  		 value = get_bit(PIND_Register, u8pinNo);
    10c0:	e0 e3       	ldi	r30, 0x30	; 48
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_u8GetPinaValue+0xd6>
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_u8GetPinaValue+0xd2>
    10dc:	ca 01       	movw	r24, r20
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	89 83       	std	Y+1, r24	; 0x01
  	  	  }break;

  }
  return value;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <KEYPAD_vidInit>:

static u8 Columns[3] = {C1_PIN , C2_PIN , C3_PIN} ;
static u8 Rows[4] = {R1_PIN , R2_PIN , R3_PIN, R4_PIN} ;

void KEYPAD_vidInit(void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	0f 92       	push	r0
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
   u8 u8PinNo;

   for(u8PinNo = 0; u8PinNo < 3; u8PinNo ++)
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <KEYPAD_vidInit+0x2c>
   {
	   DIO_vidSetPinDir(keyPad_PORT, Columns[u8PinNo], 1);
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	fc 01       	movw	r30, r24
    110a:	e8 59       	subi	r30, 0x98	; 152
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	90 81       	ld	r25, Z
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	69 2f       	mov	r22, r25
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_vidSetPinDir>

void KEYPAD_vidInit(void)
{
   u8 u8PinNo;

   for(u8PinNo = 0; u8PinNo < 3; u8PinNo ++)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	83 30       	cpi	r24, 0x03	; 3
    1124:	70 f3       	brcs	.-36     	; 0x1102 <KEYPAD_vidInit+0xe>
   {
	   DIO_vidSetPinDir(keyPad_PORT, Columns[u8PinNo], 1);
   }

   for(u8PinNo = 0; u8PinNo < 4; u8PinNo ++)
    1126:	19 82       	std	Y+1, r1	; 0x01
    1128:	1b c0       	rjmp	.+54     	; 0x1160 <KEYPAD_vidInit+0x6c>
   {
	   DIO_vidSetPinDir(keyPad_PORT, Rows[u8PinNo], 0);
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	fc 01       	movw	r30, r24
    1132:	e5 59       	subi	r30, 0x95	; 149
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	90 81       	ld	r25, Z
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	69 2f       	mov	r22, r25
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_vidSetPinDir>
       DIO_vidSetPinval(keyPad_PORT, Rows[u8PinNo], 1);
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	fc 01       	movw	r30, r24
    114a:	e5 59       	subi	r30, 0x95	; 149
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	90 81       	ld	r25, Z
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	69 2f       	mov	r22, r25
    1154:	41 e0       	ldi	r20, 0x01	; 1
    1156:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>
   for(u8PinNo = 0; u8PinNo < 3; u8PinNo ++)
   {
	   DIO_vidSetPinDir(keyPad_PORT, Columns[u8PinNo], 1);
   }

   for(u8PinNo = 0; u8PinNo < 4; u8PinNo ++)
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	8f 5f       	subi	r24, 0xFF	; 255
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	10 f3       	brcs	.-60     	; 0x112a <KEYPAD_vidInit+0x36>
   {
	   DIO_vidSetPinDir(keyPad_PORT, Rows[u8PinNo], 0);
       DIO_vidSetPinval(keyPad_PORT, Rows[u8PinNo], 1);
   }
}
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <KEYPAD_u8GetPressedKey>:

u8 KEYPAD_u8GetPressedKey(void)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <KEYPAD_u8GetPressedKey+0x6>
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	u8 u8ColNo , u8RowNo , u8RetVal = 0 ;
    117a:	19 82       	std	Y+1, r1	; 0x01

	for (u8ColNo = 0 ; u8ColNo < 3 ; u8ColNo ++)
    117c:	1b 82       	std	Y+3, r1	; 0x03
    117e:	49 c0       	rjmp	.+146    	; 0x1212 <KEYPAD_u8GetPressedKey+0xa4>
	{
		/*Activate column*/
		DIO_vidSetPinval(keyPad_PORT, Columns[u8ColNo] , LOW) ;
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	fc 01       	movw	r30, r24
    1188:	e8 59       	subi	r30, 0x98	; 152
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	90 81       	ld	r25, Z
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	69 2f       	mov	r22, r25
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>

		for(u8RowNo=0 ; u8RowNo < 4 ; u8RowNo++)
    1198:	1a 82       	std	Y+2, r1	; 0x02
    119a:	29 c0       	rjmp	.+82     	; 0x11ee <KEYPAD_u8GetPressedKey+0x80>
		{
			if (DIO_u8GetPinaValue(keyPad_PORT,Rows[u8RowNo] ) == LOW)
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	fc 01       	movw	r30, r24
    11a4:	e5 59       	subi	r30, 0x95	; 149
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	90 81       	ld	r25, Z
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	69 2f       	mov	r22, r25
    11ae:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_u8GetPinaValue>
    11b2:	88 23       	and	r24, r24
    11b4:	c9 f4       	brne	.+50     	; 0x11e8 <KEYPAD_u8GetPressedKey+0x7a>
				{
					u8RetVal =  ( (u8RowNo * 3) + u8ColNo) ;
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	c9 01       	movw	r24, r18
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	82 0f       	add	r24, r18
    11c4:	93 1f       	adc	r25, r19
    11c6:	98 2f       	mov	r25, r24
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	89 0f       	add	r24, r25
    11cc:	89 83       	std	Y+1, r24	; 0x01
					/*wait to depress the key*/
					while(DIO_u8GetPinaValue(keyPad_PORT,Rows[u8RowNo] ) == LOW);
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	fc 01       	movw	r30, r24
    11d6:	e5 59       	subi	r30, 0x95	; 149
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	90 81       	ld	r25, Z
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	69 2f       	mov	r22, r25
    11e0:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_u8GetPinaValue>
    11e4:	88 23       	and	r24, r24
    11e6:	99 f3       	breq	.-26     	; 0x11ce <KEYPAD_u8GetPressedKey+0x60>
	for (u8ColNo = 0 ; u8ColNo < 3 ; u8ColNo ++)
	{
		/*Activate column*/
		DIO_vidSetPinval(keyPad_PORT, Columns[u8ColNo] , LOW) ;

		for(u8RowNo=0 ; u8RowNo < 4 ; u8RowNo++)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	a0 f2       	brcs	.-88     	; 0x119c <KEYPAD_u8GetPressedKey+0x2e>
					while(DIO_u8GetPinaValue(keyPad_PORT,Rows[u8RowNo] ) == LOW);
				}
		}

		/*Deactivate column*/
		DIO_vidSetPinval(keyPad_PORT , Columns[u8ColNo] , HIGH) ;
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	fc 01       	movw	r30, r24
    11fc:	e8 59       	subi	r30, 0x98	; 152
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	90 81       	ld	r25, Z
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	69 2f       	mov	r22, r25
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>

u8 KEYPAD_u8GetPressedKey(void)
{
	u8 u8ColNo , u8RowNo , u8RetVal = 0 ;

	for (u8ColNo = 0 ; u8ColNo < 3 ; u8ColNo ++)
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	8b 83       	std	Y+3, r24	; 0x03
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	08 f4       	brcc	.+2      	; 0x121a <KEYPAD_u8GetPressedKey+0xac>
    1218:	b3 cf       	rjmp	.-154    	; 0x1180 <KEYPAD_u8GetPressedKey+0x12>

		/*Deactivate column*/
		DIO_vidSetPinval(keyPad_PORT , Columns[u8ColNo] , HIGH) ;
	}

	return u8RetVal ;
    121a:	89 81       	ldd	r24, Y+1	; 0x01


}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <LCD_vidSendCMD>:
#include "../MCAL/DIO_LOC.h"
#include "LCD_CHG.h"
#include <avr/delay.h>

void LCD_vidSendCMD(u8 u8CMD)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	6d 97       	sbiw	r28, 0x1d	; 29
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	8d 8f       	std	Y+29, r24	; 0x1d
	// set RS 0
	//clr_bit(PORTA, 0);
	DIO_vidSetPinval(LCD_RsPort, LCD_RsPin, 0);
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>

	// set RW to 0 "write"
	//clr_bit(PORTA, 1);
	DIO_vidSetPinval(LCD_RwPort, LCD_RwPin, 0);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>


	// Set falling register.
    //set_bit(PORTA,2);
	DIO_vidSetPinval(LCD_EnPort, LCD_EnPin, 1);
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	62 e0       	ldi	r22, 0x02	; 2
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>

	//LCD_DataPort = u8CMD;
	DIO_vidSetPortVal(LCD_DataPort, u8CMD);
    125c:	83 e0       	ldi	r24, 0x03	; 3
    125e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1260:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_vidSetPortVal>
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e4       	ldi	r27, 0x40	; 64
    126c:	89 8f       	std	Y+25, r24	; 0x19
    126e:	9a 8f       	std	Y+26, r25	; 0x1a
    1270:	ab 8f       	std	Y+27, r26	; 0x1b
    1272:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1274:	69 8d       	ldd	r22, Y+25	; 0x19
    1276:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1278:	8b 8d       	ldd	r24, Y+27	; 0x1b
    127a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e8       	ldi	r19, 0x80	; 128
    1280:	4b e3       	ldi	r20, 0x3B	; 59
    1282:	55 e4       	ldi	r21, 0x45	; 69
    1284:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	8d 8b       	std	Y+21, r24	; 0x15
    128e:	9e 8b       	std	Y+22, r25	; 0x16
    1290:	af 8b       	std	Y+23, r26	; 0x17
    1292:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1294:	6d 89       	ldd	r22, Y+21	; 0x15
    1296:	7e 89       	ldd	r23, Y+22	; 0x16
    1298:	8f 89       	ldd	r24, Y+23	; 0x17
    129a:	98 8d       	ldd	r25, Y+24	; 0x18
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e8       	ldi	r20, 0x80	; 128
    12a2:	5f e3       	ldi	r21, 0x3F	; 63
    12a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12a8:	88 23       	and	r24, r24
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <LCD_vidSendCMD+0x8e>
		__ticks = 1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c 8b       	std	Y+20, r25	; 0x14
    12b2:	8b 8b       	std	Y+19, r24	; 0x13
    12b4:	3f c0       	rjmp	.+126    	; 0x1334 <LCD_vidSendCMD+0x10c>
	else if (__tmp > 65535)
    12b6:	6d 89       	ldd	r22, Y+21	; 0x15
    12b8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ba:	8f 89       	ldd	r24, Y+23	; 0x17
    12bc:	98 8d       	ldd	r25, Y+24	; 0x18
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	3f ef       	ldi	r19, 0xFF	; 255
    12c2:	4f e7       	ldi	r20, 0x7F	; 127
    12c4:	57 e4       	ldi	r21, 0x47	; 71
    12c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12ca:	18 16       	cp	r1, r24
    12cc:	4c f5       	brge	.+82     	; 0x1320 <LCD_vidSendCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ce:	69 8d       	ldd	r22, Y+25	; 0x19
    12d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e2       	ldi	r20, 0x20	; 32
    12dc:	51 e4       	ldi	r21, 0x41	; 65
    12de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	9c 8b       	std	Y+20, r25	; 0x14
    12f4:	8b 8b       	std	Y+19, r24	; 0x13
    12f6:	0f c0       	rjmp	.+30     	; 0x1316 <LCD_vidSendCMD+0xee>
    12f8:	8c e2       	ldi	r24, 0x2C	; 44
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	9a 8b       	std	Y+18, r25	; 0x12
    12fe:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1300:	89 89       	ldd	r24, Y+17	; 0x11
    1302:	9a 89       	ldd	r25, Y+18	; 0x12
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <LCD_vidSendCMD+0xdc>
    1308:	9a 8b       	std	Y+18, r25	; 0x12
    130a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130c:	8b 89       	ldd	r24, Y+19	; 0x13
    130e:	9c 89       	ldd	r25, Y+20	; 0x14
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	9c 8b       	std	Y+20, r25	; 0x14
    1314:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1316:	8b 89       	ldd	r24, Y+19	; 0x13
    1318:	9c 89       	ldd	r25, Y+20	; 0x14
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	69 f7       	brne	.-38     	; 0x12f8 <LCD_vidSendCMD+0xd0>
    131e:	14 c0       	rjmp	.+40     	; 0x1348 <LCD_vidSendCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1320:	6d 89       	ldd	r22, Y+21	; 0x15
    1322:	7e 89       	ldd	r23, Y+22	; 0x16
    1324:	8f 89       	ldd	r24, Y+23	; 0x17
    1326:	98 8d       	ldd	r25, Y+24	; 0x18
    1328:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	9c 8b       	std	Y+20, r25	; 0x14
    1332:	8b 8b       	std	Y+19, r24	; 0x13
    1334:	8b 89       	ldd	r24, Y+19	; 0x13
    1336:	9c 89       	ldd	r25, Y+20	; 0x14
    1338:	98 8b       	std	Y+16, r25	; 0x10
    133a:	8f 87       	std	Y+15, r24	; 0x0f
    133c:	8f 85       	ldd	r24, Y+15	; 0x0f
    133e:	98 89       	ldd	r25, Y+16	; 0x10
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	f1 f7       	brne	.-4      	; 0x1340 <LCD_vidSendCMD+0x118>
    1344:	98 8b       	std	Y+16, r25	; 0x10
    1346:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(2);

    //clr_bit(PORTA,2);
    DIO_vidSetPinval(LCD_EnPort, LCD_EnPin, 0);
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	62 e0       	ldi	r22, 0x02	; 2
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	a0 e0       	ldi	r26, 0x00	; 0
    1358:	b0 e4       	ldi	r27, 0x40	; 64
    135a:	8b 87       	std	Y+11, r24	; 0x0b
    135c:	9c 87       	std	Y+12, r25	; 0x0c
    135e:	ad 87       	std	Y+13, r26	; 0x0d
    1360:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1362:	6b 85       	ldd	r22, Y+11	; 0x0b
    1364:	7c 85       	ldd	r23, Y+12	; 0x0c
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	9e 85       	ldd	r25, Y+14	; 0x0e
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e8       	ldi	r19, 0x80	; 128
    136e:	4b e3       	ldi	r20, 0x3B	; 59
    1370:	55 e4       	ldi	r21, 0x45	; 69
    1372:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	8f 83       	std	Y+7, r24	; 0x07
    137c:	98 87       	std	Y+8, r25	; 0x08
    137e:	a9 87       	std	Y+9, r26	; 0x09
    1380:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1382:	6f 81       	ldd	r22, Y+7	; 0x07
    1384:	78 85       	ldd	r23, Y+8	; 0x08
    1386:	89 85       	ldd	r24, Y+9	; 0x09
    1388:	9a 85       	ldd	r25, Y+10	; 0x0a
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e8       	ldi	r20, 0x80	; 128
    1390:	5f e3       	ldi	r21, 0x3F	; 63
    1392:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1396:	88 23       	and	r24, r24
    1398:	2c f4       	brge	.+10     	; 0x13a4 <LCD_vidSendCMD+0x17c>
		__ticks = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9e 83       	std	Y+6, r25	; 0x06
    13a0:	8d 83       	std	Y+5, r24	; 0x05
    13a2:	3f c0       	rjmp	.+126    	; 0x1422 <LCD_vidSendCMD+0x1fa>
	else if (__tmp > 65535)
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	3f ef       	ldi	r19, 0xFF	; 255
    13b0:	4f e7       	ldi	r20, 0x7F	; 127
    13b2:	57 e4       	ldi	r21, 0x47	; 71
    13b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13b8:	18 16       	cp	r1, r24
    13ba:	4c f5       	brge	.+82     	; 0x140e <LCD_vidSendCMD+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13be:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e2       	ldi	r20, 0x20	; 32
    13ca:	51 e4       	ldi	r21, 0x41	; 65
    13cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <LCD_vidSendCMD+0x1dc>
    13e6:	8c e2       	ldi	r24, 0x2C	; 44
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <LCD_vidSendCMD+0x1ca>
    13f6:	9c 83       	std	Y+4, r25	; 0x04
    13f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	69 f7       	brne	.-38     	; 0x13e6 <LCD_vidSendCMD+0x1be>
    140c:	14 c0       	rjmp	.+40     	; 0x1436 <LCD_vidSendCMD+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140e:	6f 81       	ldd	r22, Y+7	; 0x07
    1410:	78 85       	ldd	r23, Y+8	; 0x08
    1412:	89 85       	ldd	r24, Y+9	; 0x09
    1414:	9a 85       	ldd	r25, Y+10	; 0x0a
    1416:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 83       	std	Y+5, r24	; 0x05
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <LCD_vidSendCMD+0x206>
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(2);
}
    1436:	6d 96       	adiw	r28, 0x1d	; 29
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <LCD_vidInit>:

void LCD_vidInit(void)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	e8 97       	sbiw	r28, 0x38	; 56
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a8 e4       	ldi	r26, 0x48	; 72
    1462:	b2 e4       	ldi	r27, 0x42	; 66
    1464:	8d ab       	std	Y+53, r24	; 0x35
    1466:	9e ab       	std	Y+54, r25	; 0x36
    1468:	af ab       	std	Y+55, r26	; 0x37
    146a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146c:	6d a9       	ldd	r22, Y+53	; 0x35
    146e:	7e a9       	ldd	r23, Y+54	; 0x36
    1470:	8f a9       	ldd	r24, Y+55	; 0x37
    1472:	98 ad       	ldd	r25, Y+56	; 0x38
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e8       	ldi	r19, 0x80	; 128
    1478:	4b e3       	ldi	r20, 0x3B	; 59
    147a:	55 e4       	ldi	r21, 0x45	; 69
    147c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	89 ab       	std	Y+49, r24	; 0x31
    1486:	9a ab       	std	Y+50, r25	; 0x32
    1488:	ab ab       	std	Y+51, r26	; 0x33
    148a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    148c:	69 a9       	ldd	r22, Y+49	; 0x31
    148e:	7a a9       	ldd	r23, Y+50	; 0x32
    1490:	8b a9       	ldd	r24, Y+51	; 0x33
    1492:	9c a9       	ldd	r25, Y+52	; 0x34
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14a0:	88 23       	and	r24, r24
    14a2:	2c f4       	brge	.+10     	; 0x14ae <LCD_vidInit+0x66>
		__ticks = 1;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	98 ab       	std	Y+48, r25	; 0x30
    14aa:	8f a7       	std	Y+47, r24	; 0x2f
    14ac:	3f c0       	rjmp	.+126    	; 0x152c <LCD_vidInit+0xe4>
	else if (__tmp > 65535)
    14ae:	69 a9       	ldd	r22, Y+49	; 0x31
    14b0:	7a a9       	ldd	r23, Y+50	; 0x32
    14b2:	8b a9       	ldd	r24, Y+51	; 0x33
    14b4:	9c a9       	ldd	r25, Y+52	; 0x34
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	57 e4       	ldi	r21, 0x47	; 71
    14be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	4c f5       	brge	.+82     	; 0x1518 <LCD_vidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c6:	6d a9       	ldd	r22, Y+53	; 0x35
    14c8:	7e a9       	ldd	r23, Y+54	; 0x36
    14ca:	8f a9       	ldd	r24, Y+55	; 0x37
    14cc:	98 ad       	ldd	r25, Y+56	; 0x38
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e2       	ldi	r20, 0x20	; 32
    14d4:	51 e4       	ldi	r21, 0x41	; 65
    14d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	98 ab       	std	Y+48, r25	; 0x30
    14ec:	8f a7       	std	Y+47, r24	; 0x2f
    14ee:	0f c0       	rjmp	.+30     	; 0x150e <LCD_vidInit+0xc6>
    14f0:	8c e2       	ldi	r24, 0x2C	; 44
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	9e a7       	std	Y+46, r25	; 0x2e
    14f6:	8d a7       	std	Y+45, r24	; 0x2d
    14f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    14fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <LCD_vidInit+0xb4>
    1500:	9e a7       	std	Y+46, r25	; 0x2e
    1502:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1504:	8f a5       	ldd	r24, Y+47	; 0x2f
    1506:	98 a9       	ldd	r25, Y+48	; 0x30
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	98 ab       	std	Y+48, r25	; 0x30
    150c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1510:	98 a9       	ldd	r25, Y+48	; 0x30
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	69 f7       	brne	.-38     	; 0x14f0 <LCD_vidInit+0xa8>
    1516:	14 c0       	rjmp	.+40     	; 0x1540 <LCD_vidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	69 a9       	ldd	r22, Y+49	; 0x31
    151a:	7a a9       	ldd	r23, Y+50	; 0x32
    151c:	8b a9       	ldd	r24, Y+51	; 0x33
    151e:	9c a9       	ldd	r25, Y+52	; 0x34
    1520:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	98 ab       	std	Y+48, r25	; 0x30
    152a:	8f a7       	std	Y+47, r24	; 0x2f
    152c:	8f a5       	ldd	r24, Y+47	; 0x2f
    152e:	98 a9       	ldd	r25, Y+48	; 0x30
    1530:	9c a7       	std	Y+44, r25	; 0x2c
    1532:	8b a7       	std	Y+43, r24	; 0x2b
    1534:	8b a5       	ldd	r24, Y+43	; 0x2b
    1536:	9c a5       	ldd	r25, Y+44	; 0x2c
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <LCD_vidInit+0xf0>
    153c:	9c a7       	std	Y+44, r25	; 0x2c
    153e:	8b a7       	std	Y+43, r24	; 0x2b

//	Delay 50ms to ensure to initialise of the LCD driver
	_delay_ms(50);

	// Function set
	LCD_vidSendCMD(0b00111100);
    1540:	8c e3       	ldi	r24, 0x3C	; 60
    1542:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_vidSendCMD>
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a0 e0       	ldi	r26, 0x00	; 0
    154c:	b0 e4       	ldi	r27, 0x40	; 64
    154e:	8f a3       	std	Y+39, r24	; 0x27
    1550:	98 a7       	std	Y+40, r25	; 0x28
    1552:	a9 a7       	std	Y+41, r26	; 0x29
    1554:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1556:	6f a1       	ldd	r22, Y+39	; 0x27
    1558:	78 a5       	ldd	r23, Y+40	; 0x28
    155a:	89 a5       	ldd	r24, Y+41	; 0x29
    155c:	9a a5       	ldd	r25, Y+42	; 0x2a
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e8       	ldi	r19, 0x80	; 128
    1562:	4b e3       	ldi	r20, 0x3B	; 59
    1564:	55 e4       	ldi	r21, 0x45	; 69
    1566:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	8b a3       	std	Y+35, r24	; 0x23
    1570:	9c a3       	std	Y+36, r25	; 0x24
    1572:	ad a3       	std	Y+37, r26	; 0x25
    1574:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1576:	6b a1       	ldd	r22, Y+35	; 0x23
    1578:	7c a1       	ldd	r23, Y+36	; 0x24
    157a:	8d a1       	ldd	r24, Y+37	; 0x25
    157c:	9e a1       	ldd	r25, Y+38	; 0x26
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e8       	ldi	r20, 0x80	; 128
    1584:	5f e3       	ldi	r21, 0x3F	; 63
    1586:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    158a:	88 23       	and	r24, r24
    158c:	2c f4       	brge	.+10     	; 0x1598 <LCD_vidInit+0x150>
		__ticks = 1;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	9a a3       	std	Y+34, r25	; 0x22
    1594:	89 a3       	std	Y+33, r24	; 0x21
    1596:	3f c0       	rjmp	.+126    	; 0x1616 <LCD_vidInit+0x1ce>
	else if (__tmp > 65535)
    1598:	6b a1       	ldd	r22, Y+35	; 0x23
    159a:	7c a1       	ldd	r23, Y+36	; 0x24
    159c:	8d a1       	ldd	r24, Y+37	; 0x25
    159e:	9e a1       	ldd	r25, Y+38	; 0x26
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	3f ef       	ldi	r19, 0xFF	; 255
    15a4:	4f e7       	ldi	r20, 0x7F	; 127
    15a6:	57 e4       	ldi	r21, 0x47	; 71
    15a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15ac:	18 16       	cp	r1, r24
    15ae:	4c f5       	brge	.+82     	; 0x1602 <LCD_vidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b0:	6f a1       	ldd	r22, Y+39	; 0x27
    15b2:	78 a5       	ldd	r23, Y+40	; 0x28
    15b4:	89 a5       	ldd	r24, Y+41	; 0x29
    15b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e2       	ldi	r20, 0x20	; 32
    15be:	51 e4       	ldi	r21, 0x41	; 65
    15c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	bc 01       	movw	r22, r24
    15ca:	cd 01       	movw	r24, r26
    15cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9a a3       	std	Y+34, r25	; 0x22
    15d6:	89 a3       	std	Y+33, r24	; 0x21
    15d8:	0f c0       	rjmp	.+30     	; 0x15f8 <LCD_vidInit+0x1b0>
    15da:	8c e2       	ldi	r24, 0x2C	; 44
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	98 a3       	std	Y+32, r25	; 0x20
    15e0:	8f 8f       	std	Y+31, r24	; 0x1f
    15e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15e4:	98 a1       	ldd	r25, Y+32	; 0x20
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <LCD_vidInit+0x19e>
    15ea:	98 a3       	std	Y+32, r25	; 0x20
    15ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ee:	89 a1       	ldd	r24, Y+33	; 0x21
    15f0:	9a a1       	ldd	r25, Y+34	; 0x22
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	9a a3       	std	Y+34, r25	; 0x22
    15f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f8:	89 a1       	ldd	r24, Y+33	; 0x21
    15fa:	9a a1       	ldd	r25, Y+34	; 0x22
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	69 f7       	brne	.-38     	; 0x15da <LCD_vidInit+0x192>
    1600:	14 c0       	rjmp	.+40     	; 0x162a <LCD_vidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1602:	6b a1       	ldd	r22, Y+35	; 0x23
    1604:	7c a1       	ldd	r23, Y+36	; 0x24
    1606:	8d a1       	ldd	r24, Y+37	; 0x25
    1608:	9e a1       	ldd	r25, Y+38	; 0x26
    160a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	9a a3       	std	Y+34, r25	; 0x22
    1614:	89 a3       	std	Y+33, r24	; 0x21
    1616:	89 a1       	ldd	r24, Y+33	; 0x21
    1618:	9a a1       	ldd	r25, Y+34	; 0x22
    161a:	9e 8f       	std	Y+30, r25	; 0x1e
    161c:	8d 8f       	std	Y+29, r24	; 0x1d
    161e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1620:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <LCD_vidInit+0x1da>
    1626:	9e 8f       	std	Y+30, r25	; 0x1e
    1628:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	//display on/off
	LCD_vidSendCMD(0b00001100);
    162a:	8c e0       	ldi	r24, 0x0C	; 12
    162c:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_vidSendCMD>
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a0 e0       	ldi	r26, 0x00	; 0
    1636:	b0 e4       	ldi	r27, 0x40	; 64
    1638:	89 8f       	std	Y+25, r24	; 0x19
    163a:	9a 8f       	std	Y+26, r25	; 0x1a
    163c:	ab 8f       	std	Y+27, r26	; 0x1b
    163e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1640:	69 8d       	ldd	r22, Y+25	; 0x19
    1642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e8       	ldi	r19, 0x80	; 128
    164c:	4b e3       	ldi	r20, 0x3B	; 59
    164e:	55 e4       	ldi	r21, 0x45	; 69
    1650:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	8d 8b       	std	Y+21, r24	; 0x15
    165a:	9e 8b       	std	Y+22, r25	; 0x16
    165c:	af 8b       	std	Y+23, r26	; 0x17
    165e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1660:	6d 89       	ldd	r22, Y+21	; 0x15
    1662:	7e 89       	ldd	r23, Y+22	; 0x16
    1664:	8f 89       	ldd	r24, Y+23	; 0x17
    1666:	98 8d       	ldd	r25, Y+24	; 0x18
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1674:	88 23       	and	r24, r24
    1676:	2c f4       	brge	.+10     	; 0x1682 <LCD_vidInit+0x23a>
		__ticks = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9c 8b       	std	Y+20, r25	; 0x14
    167e:	8b 8b       	std	Y+19, r24	; 0x13
    1680:	3f c0       	rjmp	.+126    	; 0x1700 <LCD_vidInit+0x2b8>
	else if (__tmp > 65535)
    1682:	6d 89       	ldd	r22, Y+21	; 0x15
    1684:	7e 89       	ldd	r23, Y+22	; 0x16
    1686:	8f 89       	ldd	r24, Y+23	; 0x17
    1688:	98 8d       	ldd	r25, Y+24	; 0x18
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	57 e4       	ldi	r21, 0x47	; 71
    1692:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1696:	18 16       	cp	r1, r24
    1698:	4c f5       	brge	.+82     	; 0x16ec <LCD_vidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169a:	69 8d       	ldd	r22, Y+25	; 0x19
    169c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    169e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e2       	ldi	r20, 0x20	; 32
    16a8:	51 e4       	ldi	r21, 0x41	; 65
    16aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	bc 01       	movw	r22, r24
    16b4:	cd 01       	movw	r24, r26
    16b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9c 8b       	std	Y+20, r25	; 0x14
    16c0:	8b 8b       	std	Y+19, r24	; 0x13
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <LCD_vidInit+0x29a>
    16c4:	8c e2       	ldi	r24, 0x2C	; 44
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	9a 8b       	std	Y+18, r25	; 0x12
    16ca:	89 8b       	std	Y+17, r24	; 0x11
    16cc:	89 89       	ldd	r24, Y+17	; 0x11
    16ce:	9a 89       	ldd	r25, Y+18	; 0x12
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <LCD_vidInit+0x288>
    16d4:	9a 8b       	std	Y+18, r25	; 0x12
    16d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d8:	8b 89       	ldd	r24, Y+19	; 0x13
    16da:	9c 89       	ldd	r25, Y+20	; 0x14
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	9c 8b       	std	Y+20, r25	; 0x14
    16e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e2:	8b 89       	ldd	r24, Y+19	; 0x13
    16e4:	9c 89       	ldd	r25, Y+20	; 0x14
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	69 f7       	brne	.-38     	; 0x16c4 <LCD_vidInit+0x27c>
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <LCD_vidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ec:	6d 89       	ldd	r22, Y+21	; 0x15
    16ee:	7e 89       	ldd	r23, Y+22	; 0x16
    16f0:	8f 89       	ldd	r24, Y+23	; 0x17
    16f2:	98 8d       	ldd	r25, Y+24	; 0x18
    16f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9c 8b       	std	Y+20, r25	; 0x14
    16fe:	8b 8b       	std	Y+19, r24	; 0x13
    1700:	8b 89       	ldd	r24, Y+19	; 0x13
    1702:	9c 89       	ldd	r25, Y+20	; 0x14
    1704:	98 8b       	std	Y+16, r25	; 0x10
    1706:	8f 87       	std	Y+15, r24	; 0x0f
    1708:	8f 85       	ldd	r24, Y+15	; 0x0f
    170a:	98 89       	ldd	r25, Y+16	; 0x10
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <LCD_vidInit+0x2c4>
    1710:	98 8b       	std	Y+16, r25	; 0x10
    1712:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	/* Clear Display */
	LCD_vidSendCMD(0b00000001);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_vidSendCMD>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 ea       	ldi	r26, 0xA0	; 160
    1720:	b0 e4       	ldi	r27, 0x40	; 64
    1722:	8b 87       	std	Y+11, r24	; 0x0b
    1724:	9c 87       	std	Y+12, r25	; 0x0c
    1726:	ad 87       	std	Y+13, r26	; 0x0d
    1728:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172a:	6b 85       	ldd	r22, Y+11	; 0x0b
    172c:	7c 85       	ldd	r23, Y+12	; 0x0c
    172e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1730:	9e 85       	ldd	r25, Y+14	; 0x0e
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e8       	ldi	r19, 0x80	; 128
    1736:	4b e3       	ldi	r20, 0x3B	; 59
    1738:	55 e4       	ldi	r21, 0x45	; 69
    173a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	8f 83       	std	Y+7, r24	; 0x07
    1744:	98 87       	std	Y+8, r25	; 0x08
    1746:	a9 87       	std	Y+9, r26	; 0x09
    1748:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e8       	ldi	r20, 0x80	; 128
    1758:	5f e3       	ldi	r21, 0x3F	; 63
    175a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    175e:	88 23       	and	r24, r24
    1760:	2c f4       	brge	.+10     	; 0x176c <LCD_vidInit+0x324>
		__ticks = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	3f c0       	rjmp	.+126    	; 0x17ea <LCD_vidInit+0x3a2>
	else if (__tmp > 65535)
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	3f ef       	ldi	r19, 0xFF	; 255
    1778:	4f e7       	ldi	r20, 0x7F	; 127
    177a:	57 e4       	ldi	r21, 0x47	; 71
    177c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1780:	18 16       	cp	r1, r24
    1782:	4c f5       	brge	.+82     	; 0x17d6 <LCD_vidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	6b 85       	ldd	r22, Y+11	; 0x0b
    1786:	7c 85       	ldd	r23, Y+12	; 0x0c
    1788:	8d 85       	ldd	r24, Y+13	; 0x0d
    178a:	9e 85       	ldd	r25, Y+14	; 0x0e
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e2       	ldi	r20, 0x20	; 32
    1792:	51 e4       	ldi	r21, 0x41	; 65
    1794:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
    17ac:	0f c0       	rjmp	.+30     	; 0x17cc <LCD_vidInit+0x384>
    17ae:	8c e2       	ldi	r24, 0x2C	; 44
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	9c 83       	std	Y+4, r25	; 0x04
    17b4:	8b 83       	std	Y+3, r24	; 0x03
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <LCD_vidInit+0x372>
    17be:	9c 83       	std	Y+4, r25	; 0x04
    17c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	69 f7       	brne	.-38     	; 0x17ae <LCD_vidInit+0x366>
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <LCD_vidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9e 83       	std	Y+6, r25	; 0x06
    17e8:	8d 83       	std	Y+5, r24	; 0x05
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	9e 81       	ldd	r25, Y+6	; 0x06
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	9a 81       	ldd	r25, Y+2	; 0x02
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <LCD_vidInit+0x3ae>
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

	/* Entry Mode Set  */
	LCD_vidSendCMD(0b00000110);
    17fe:	86 e0       	ldi	r24, 0x06	; 6
    1800:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_vidSendCMD>

}
    1804:	e8 96       	adiw	r28, 0x38	; 56
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <LCD_vidWriteChar>:

void LCD_vidWriteChar(u8 u8character)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	6d 97       	sbiw	r28, 0x1d	; 29
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	8d 8f       	std	Y+29, r24	; 0x1d

	// set RS to 1
	//set_bit(PORTA, 0);
	DIO_vidSetPinval(LCD_RsPort, LCD_RsPin, 1);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>

	// set RW to 0 "write"
	//clr_bit(PORTA, 1);
	DIO_vidSetPinval(LCD_RwPort, LCD_RwPin, 0);
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>

	// Set falling register.
	DIO_vidSetPinval(LCD_EnPort, LCD_EnPin, 1);
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	62 e0       	ldi	r22, 0x02	; 2
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>

	DIO_vidSetPortVal(LCD_DataPort, u8character);
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    184e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_vidSetPortVal>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 e0       	ldi	r26, 0x00	; 0
    1858:	b0 e4       	ldi	r27, 0x40	; 64
    185a:	89 8f       	std	Y+25, r24	; 0x19
    185c:	9a 8f       	std	Y+26, r25	; 0x1a
    185e:	ab 8f       	std	Y+27, r26	; 0x1b
    1860:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1862:	69 8d       	ldd	r22, Y+25	; 0x19
    1864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e8       	ldi	r19, 0x80	; 128
    186e:	4b e3       	ldi	r20, 0x3B	; 59
    1870:	55 e4       	ldi	r21, 0x45	; 69
    1872:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	8d 8b       	std	Y+21, r24	; 0x15
    187c:	9e 8b       	std	Y+22, r25	; 0x16
    187e:	af 8b       	std	Y+23, r26	; 0x17
    1880:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1882:	6d 89       	ldd	r22, Y+21	; 0x15
    1884:	7e 89       	ldd	r23, Y+22	; 0x16
    1886:	8f 89       	ldd	r24, Y+23	; 0x17
    1888:	98 8d       	ldd	r25, Y+24	; 0x18
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1896:	88 23       	and	r24, r24
    1898:	2c f4       	brge	.+10     	; 0x18a4 <LCD_vidWriteChar+0x8e>
		__ticks = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9c 8b       	std	Y+20, r25	; 0x14
    18a0:	8b 8b       	std	Y+19, r24	; 0x13
    18a2:	3f c0       	rjmp	.+126    	; 0x1922 <LCD_vidWriteChar+0x10c>
	else if (__tmp > 65535)
    18a4:	6d 89       	ldd	r22, Y+21	; 0x15
    18a6:	7e 89       	ldd	r23, Y+22	; 0x16
    18a8:	8f 89       	ldd	r24, Y+23	; 0x17
    18aa:	98 8d       	ldd	r25, Y+24	; 0x18
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	4c f5       	brge	.+82     	; 0x190e <LCD_vidWriteChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	69 8d       	ldd	r22, Y+25	; 0x19
    18be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e2       	ldi	r20, 0x20	; 32
    18ca:	51 e4       	ldi	r21, 0x41	; 65
    18cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9c 8b       	std	Y+20, r25	; 0x14
    18e2:	8b 8b       	std	Y+19, r24	; 0x13
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <LCD_vidWriteChar+0xee>
    18e6:	8c e2       	ldi	r24, 0x2C	; 44
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	9a 8b       	std	Y+18, r25	; 0x12
    18ec:	89 8b       	std	Y+17, r24	; 0x11
    18ee:	89 89       	ldd	r24, Y+17	; 0x11
    18f0:	9a 89       	ldd	r25, Y+18	; 0x12
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <LCD_vidWriteChar+0xdc>
    18f6:	9a 8b       	std	Y+18, r25	; 0x12
    18f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	8b 89       	ldd	r24, Y+19	; 0x13
    18fc:	9c 89       	ldd	r25, Y+20	; 0x14
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	9c 8b       	std	Y+20, r25	; 0x14
    1902:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f7       	brne	.-38     	; 0x18e6 <LCD_vidWriteChar+0xd0>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <LCD_vidWriteChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190e:	6d 89       	ldd	r22, Y+21	; 0x15
    1910:	7e 89       	ldd	r23, Y+22	; 0x16
    1912:	8f 89       	ldd	r24, Y+23	; 0x17
    1914:	98 8d       	ldd	r25, Y+24	; 0x18
    1916:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9c 8b       	std	Y+20, r25	; 0x14
    1920:	8b 8b       	std	Y+19, r24	; 0x13
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	98 8b       	std	Y+16, r25	; 0x10
    1928:	8f 87       	std	Y+15, r24	; 0x0f
    192a:	8f 85       	ldd	r24, Y+15	; 0x0f
    192c:	98 89       	ldd	r25, Y+16	; 0x10
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_vidWriteChar+0x118>
    1932:	98 8b       	std	Y+16, r25	; 0x10
    1934:	8f 87       	std	Y+15, r24	; 0x0f

    _delay_ms(2);

    DIO_vidSetPinval(LCD_EnPort, LCD_EnPin, 0);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	62 e0       	ldi	r22, 0x02	; 2
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <DIO_vidSetPinval>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e0       	ldi	r26, 0x00	; 0
    1946:	b0 e4       	ldi	r27, 0x40	; 64
    1948:	8b 87       	std	Y+11, r24	; 0x0b
    194a:	9c 87       	std	Y+12, r25	; 0x0c
    194c:	ad 87       	std	Y+13, r26	; 0x0d
    194e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	6b 85       	ldd	r22, Y+11	; 0x0b
    1952:	7c 85       	ldd	r23, Y+12	; 0x0c
    1954:	8d 85       	ldd	r24, Y+13	; 0x0d
    1956:	9e 85       	ldd	r25, Y+14	; 0x0e
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e8       	ldi	r19, 0x80	; 128
    195c:	4b e3       	ldi	r20, 0x3B	; 59
    195e:	55 e4       	ldi	r21, 0x45	; 69
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8f 83       	std	Y+7, r24	; 0x07
    196a:	98 87       	std	Y+8, r25	; 0x08
    196c:	a9 87       	std	Y+9, r26	; 0x09
    196e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1970:	6f 81       	ldd	r22, Y+7	; 0x07
    1972:	78 85       	ldd	r23, Y+8	; 0x08
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <LCD_vidWriteChar+0x17c>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <LCD_vidWriteChar+0x1fa>
	else if (__tmp > 65535)
    1992:	6f 81       	ldd	r22, Y+7	; 0x07
    1994:	78 85       	ldd	r23, Y+8	; 0x08
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	9a 85       	ldd	r25, Y+10	; 0x0a
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <LCD_vidWriteChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <LCD_vidWriteChar+0x1dc>
    19d4:	8c e2       	ldi	r24, 0x2C	; 44
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	9c 83       	std	Y+4, r25	; 0x04
    19da:	8b 83       	std	Y+3, r24	; 0x03
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_vidWriteChar+0x1ca>
    19e4:	9c 83       	std	Y+4, r25	; 0x04
    19e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9e 83       	std	Y+6, r25	; 0x06
    19f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <LCD_vidWriteChar+0x1be>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <LCD_vidWriteChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6f 81       	ldd	r22, Y+7	; 0x07
    19fe:	78 85       	ldd	r23, Y+8	; 0x08
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_vidWriteChar+0x206>
    1a20:	9a 83       	std	Y+2, r25	; 0x02
    1a22:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(2);

}
    1a24:	6d 96       	adiw	r28, 0x1d	; 29
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <LCD_vidShiftRL>:


void LCD_vidShiftRL(u8 u8index)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	6e 97       	sbiw	r28, 0x1e	; 30
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 loop;

	for(loop = 0; loop < u8index; loop ++ )
    1a4c:	1d 8e       	std	Y+29, r1	; 0x1d
    1a4e:	78 c0       	rjmp	.+240    	; 0x1b40 <LCD_vidShiftRL+0x10a>
	{
		LCD_vidSendCMD(0b00011100);
    1a50:	8c e1       	ldi	r24, 0x1C	; 28
    1a52:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_vidSendCMD>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	aa ef       	ldi	r26, 0xFA	; 250
    1a5c:	b3 e4       	ldi	r27, 0x43	; 67
    1a5e:	89 8f       	std	Y+25, r24	; 0x19
    1a60:	9a 8f       	std	Y+26, r25	; 0x1a
    1a62:	ab 8f       	std	Y+27, r26	; 0x1b
    1a64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	69 8d       	ldd	r22, Y+25	; 0x19
    1a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e8       	ldi	r19, 0x80	; 128
    1a72:	4b e3       	ldi	r20, 0x3B	; 59
    1a74:	55 e4       	ldi	r21, 0x45	; 69
    1a76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8d 8b       	std	Y+21, r24	; 0x15
    1a80:	9e 8b       	std	Y+22, r25	; 0x16
    1a82:	af 8b       	std	Y+23, r26	; 0x17
    1a84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a86:	6d 89       	ldd	r22, Y+21	; 0x15
    1a88:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <LCD_vidShiftRL+0x72>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <LCD_vidShiftRL+0xf0>
	else if (__tmp > 65535)
    1aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1aac:	8f 89       	ldd	r24, Y+23	; 0x17
    1aae:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <LCD_vidShiftRL+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9c 8b       	std	Y+20, r25	; 0x14
    1ae6:	8b 8b       	std	Y+19, r24	; 0x13
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_vidShiftRL+0xd2>
    1aea:	8c e2       	ldi	r24, 0x2C	; 44
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	9a 8b       	std	Y+18, r25	; 0x12
    1af0:	89 8b       	std	Y+17, r24	; 0x11
    1af2:	89 89       	ldd	r24, Y+17	; 0x11
    1af4:	9a 89       	ldd	r25, Y+18	; 0x12
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_vidShiftRL+0xc0>
    1afa:	9a 8b       	std	Y+18, r25	; 0x12
    1afc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_vidShiftRL+0xb4>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <LCD_vidShiftRL+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
    1b26:	8b 89       	ldd	r24, Y+19	; 0x13
    1b28:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2a:	98 8b       	std	Y+16, r25	; 0x10
    1b2c:	8f 87       	std	Y+15, r24	; 0x0f
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 89       	ldd	r25, Y+16	; 0x10
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_vidShiftRL+0xfc>
    1b36:	98 8b       	std	Y+16, r25	; 0x10
    1b38:	8f 87       	std	Y+15, r24	; 0x0f

void LCD_vidShiftRL(u8 u8index)
{
	u8 loop;

	for(loop = 0; loop < u8index; loop ++ )
    1b3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b3c:	8f 5f       	subi	r24, 0xFF	; 255
    1b3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b44:	98 17       	cp	r25, r24
    1b46:	08 f4       	brcc	.+2      	; 0x1b4a <LCD_vidShiftRL+0x114>
    1b48:	83 cf       	rjmp	.-250    	; 0x1a50 <LCD_vidShiftRL+0x1a>
		LCD_vidSendCMD(0b00011100);

		_delay_ms(500);
	}

	for(loop = 0; loop < u8index; loop ++ )
    1b4a:	1d 8e       	std	Y+29, r1	; 0x1d
    1b4c:	78 c0       	rjmp	.+240    	; 0x1c3e <LCD_vidShiftRL+0x208>
	{
		LCD_vidSendCMD(0b00011000);
    1b4e:	88 e1       	ldi	r24, 0x18	; 24
    1b50:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_vidSendCMD>
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	aa ef       	ldi	r26, 0xFA	; 250
    1b5a:	b3 e4       	ldi	r27, 0x43	; 67
    1b5c:	8b 87       	std	Y+11, r24	; 0x0b
    1b5e:	9c 87       	std	Y+12, r25	; 0x0c
    1b60:	ad 87       	std	Y+13, r26	; 0x0d
    1b62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e8       	ldi	r19, 0x80	; 128
    1b70:	4b e3       	ldi	r20, 0x3B	; 59
    1b72:	55 e4       	ldi	r21, 0x45	; 69
    1b74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	8f 83       	std	Y+7, r24	; 0x07
    1b7e:	98 87       	std	Y+8, r25	; 0x08
    1b80:	a9 87       	std	Y+9, r26	; 0x09
    1b82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b84:	6f 81       	ldd	r22, Y+7	; 0x07
    1b86:	78 85       	ldd	r23, Y+8	; 0x08
    1b88:	89 85       	ldd	r24, Y+9	; 0x09
    1b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e8       	ldi	r20, 0x80	; 128
    1b92:	5f e3       	ldi	r21, 0x3F	; 63
    1b94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b98:	88 23       	and	r24, r24
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <LCD_vidShiftRL+0x170>
		__ticks = 1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9e 83       	std	Y+6, r25	; 0x06
    1ba2:	8d 83       	std	Y+5, r24	; 0x05
    1ba4:	3f c0       	rjmp	.+126    	; 0x1c24 <LCD_vidShiftRL+0x1ee>
	else if (__tmp > 65535)
    1ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba8:	78 85       	ldd	r23, Y+8	; 0x08
    1baa:	89 85       	ldd	r24, Y+9	; 0x09
    1bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	3f ef       	ldi	r19, 0xFF	; 255
    1bb2:	4f e7       	ldi	r20, 0x7F	; 127
    1bb4:	57 e4       	ldi	r21, 0x47	; 71
    1bb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	4c f5       	brge	.+82     	; 0x1c10 <LCD_vidShiftRL+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e2       	ldi	r20, 0x20	; 32
    1bcc:	51 e4       	ldi	r21, 0x41	; 65
    1bce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9e 83       	std	Y+6, r25	; 0x06
    1be4:	8d 83       	std	Y+5, r24	; 0x05
    1be6:	0f c0       	rjmp	.+30     	; 0x1c06 <LCD_vidShiftRL+0x1d0>
    1be8:	8c e2       	ldi	r24, 0x2C	; 44
    1bea:	91 e0       	ldi	r25, 0x01	; 1
    1bec:	9c 83       	std	Y+4, r25	; 0x04
    1bee:	8b 83       	std	Y+3, r24	; 0x03
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <LCD_vidShiftRL+0x1be>
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	9e 83       	std	Y+6, r25	; 0x06
    1c04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	69 f7       	brne	.-38     	; 0x1be8 <LCD_vidShiftRL+0x1b2>
    1c0e:	14 c0       	rjmp	.+40     	; 0x1c38 <LCD_vidShiftRL+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c10:	6f 81       	ldd	r22, Y+7	; 0x07
    1c12:	78 85       	ldd	r23, Y+8	; 0x08
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	9e 83       	std	Y+6, r25	; 0x06
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	8d 81       	ldd	r24, Y+5	; 0x05
    1c26:	9e 81       	ldd	r25, Y+6	; 0x06
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_vidShiftRL+0x1fa>
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
		LCD_vidSendCMD(0b00011100);

		_delay_ms(500);
	}

	for(loop = 0; loop < u8index; loop ++ )
    1c38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c3a:	8f 5f       	subi	r24, 0xFF	; 255
    1c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c42:	98 17       	cp	r25, r24
    1c44:	08 f4       	brcc	.+2      	; 0x1c48 <LCD_vidShiftRL+0x212>
    1c46:	83 cf       	rjmp	.-250    	; 0x1b4e <LCD_vidShiftRL+0x118>
	{
		LCD_vidSendCMD(0b00011000);

		_delay_ms(500);
	}
}
    1c48:	6e 96       	adiw	r28, 0x1e	; 30
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <LCD_vidWriteStr>:

void LCD_vidWriteStr (u8 u8String[], u8 u8index)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	ae 97       	sbiw	r28, 0x2e	; 46
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	9d a7       	std	Y+45, r25	; 0x2d
    1c70:	8c a7       	std	Y+44, r24	; 0x2c
    1c72:	6e a7       	std	Y+46, r22	; 0x2e
	u8 loop;

	for (loop = 0; loop < u8index ; loop ++)
    1c74:	1b a6       	std	Y+43, r1	; 0x2b
    1c76:	80 c0       	rjmp	.+256    	; 0x1d78 <LCD_vidWriteStr+0x11e>
	{
		/* Write Character on LCD */
		LCD_vidWriteChar(u8String[loop]);
    1c78:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c80:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c82:	fc 01       	movw	r30, r24
    1c84:	e2 0f       	add	r30, r18
    1c86:	f3 1f       	adc	r31, r19
    1c88:	80 81       	ld	r24, Z
    1c8a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_vidWriteChar>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e0       	ldi	r26, 0x00	; 0
    1c94:	b0 e4       	ldi	r27, 0x40	; 64
    1c96:	8f a3       	std	Y+39, r24	; 0x27
    1c98:	98 a7       	std	Y+40, r25	; 0x28
    1c9a:	a9 a7       	std	Y+41, r26	; 0x29
    1c9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6f a1       	ldd	r22, Y+39	; 0x27
    1ca0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e8       	ldi	r19, 0x80	; 128
    1caa:	4b e3       	ldi	r20, 0x3B	; 59
    1cac:	55 e4       	ldi	r21, 0x45	; 69
    1cae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	8b a3       	std	Y+35, r24	; 0x23
    1cb8:	9c a3       	std	Y+36, r25	; 0x24
    1cba:	ad a3       	std	Y+37, r26	; 0x25
    1cbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <LCD_vidWriteStr+0x86>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9a a3       	std	Y+34, r25	; 0x22
    1cdc:	89 a3       	std	Y+33, r24	; 0x21
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <LCD_vidWriteStr+0x104>
	else if (__tmp > 65535)
    1ce0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <LCD_vidWriteStr+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cfa:	78 a5       	ldd	r23, Y+40	; 0x28
    1cfc:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9a a3       	std	Y+34, r25	; 0x22
    1d1e:	89 a3       	std	Y+33, r24	; 0x21
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <LCD_vidWriteStr+0xe6>
    1d22:	8c e2       	ldi	r24, 0x2C	; 44
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	98 a3       	std	Y+32, r25	; 0x20
    1d28:	8f 8f       	std	Y+31, r24	; 0x1f
    1d2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d2c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_vidWriteStr+0xd4>
    1d32:	98 a3       	std	Y+32, r25	; 0x20
    1d34:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	89 a1       	ldd	r24, Y+33	; 0x21
    1d38:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	9a a3       	std	Y+34, r25	; 0x22
    1d3e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	89 a1       	ldd	r24, Y+33	; 0x21
    1d42:	9a a1       	ldd	r25, Y+34	; 0x22
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <LCD_vidWriteStr+0xc8>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <LCD_vidWriteStr+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d50:	9e a1       	ldd	r25, Y+38	; 0x26
    1d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9a a3       	std	Y+34, r25	; 0x22
    1d5c:	89 a3       	std	Y+33, r24	; 0x21
    1d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d60:	9a a1       	ldd	r25, Y+34	; 0x22
    1d62:	9e 8f       	std	Y+30, r25	; 0x1e
    1d64:	8d 8f       	std	Y+29, r24	; 0x1d
    1d66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d68:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_vidWriteStr+0x110>
    1d6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d70:	8d 8f       	std	Y+29, r24	; 0x1d

void LCD_vidWriteStr (u8 u8String[], u8 u8index)
{
	u8 loop;

	for (loop = 0; loop < u8index ; loop ++)
    1d72:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d74:	8f 5f       	subi	r24, 0xFF	; 255
    1d76:	8b a7       	std	Y+43, r24	; 0x2b
    1d78:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d7a:	8e a5       	ldd	r24, Y+46	; 0x2e
    1d7c:	98 17       	cp	r25, r24
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <LCD_vidWriteStr+0x128>
    1d80:	7b cf       	rjmp	.-266    	; 0x1c78 <LCD_vidWriteStr+0x1e>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	aa ef       	ldi	r26, 0xFA	; 250
    1d88:	b3 e4       	ldi	r27, 0x43	; 67
    1d8a:	89 8f       	std	Y+25, r24	; 0x19
    1d8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	69 8d       	ldd	r22, Y+25	; 0x19
    1d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e8       	ldi	r19, 0x80	; 128
    1d9e:	4b e3       	ldi	r20, 0x3B	; 59
    1da0:	55 e4       	ldi	r21, 0x45	; 69
    1da2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8d 8b       	std	Y+21, r24	; 0x15
    1dac:	9e 8b       	std	Y+22, r25	; 0x16
    1dae:	af 8b       	std	Y+23, r26	; 0x17
    1db0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db2:	6d 89       	ldd	r22, Y+21	; 0x15
    1db4:	7e 89       	ldd	r23, Y+22	; 0x16
    1db6:	8f 89       	ldd	r24, Y+23	; 0x17
    1db8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <LCD_vidWriteStr+0x17a>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9c 8b       	std	Y+20, r25	; 0x14
    1dd0:	8b 8b       	std	Y+19, r24	; 0x13
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <LCD_vidWriteStr+0x1f8>
	else if (__tmp > 65535)
    1dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dda:	98 8d       	ldd	r25, Y+24	; 0x18
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <LCD_vidWriteStr+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	69 8d       	ldd	r22, Y+25	; 0x19
    1dee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <LCD_vidWriteStr+0x1da>
    1e16:	8c e2       	ldi	r24, 0x2C	; 44
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	9a 8b       	std	Y+18, r25	; 0x12
    1e1c:	89 8b       	std	Y+17, r24	; 0x11
    1e1e:	89 89       	ldd	r24, Y+17	; 0x11
    1e20:	9a 89       	ldd	r25, Y+18	; 0x12
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_vidWriteStr+0x1c8>
    1e26:	9a 8b       	std	Y+18, r25	; 0x12
    1e28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <LCD_vidWriteStr+0x1bc>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <LCD_vidWriteStr+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e40:	7e 89       	ldd	r23, Y+22	; 0x16
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9c 8b       	std	Y+20, r25	; 0x14
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	98 8b       	std	Y+16, r25	; 0x10
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
    1e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5c:	98 89       	ldd	r25, Y+16	; 0x10
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_vidWriteStr+0x204>
    1e62:	98 8b       	std	Y+16, r25	; 0x10
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
     }

	_delay_ms(500);

//  Function to shift the entire display from right to lift and opposite.
	LCD_vidShiftRL(16 - u8index);
    1e66:	90 e1       	ldi	r25, 0x10	; 16
    1e68:	8e a5       	ldd	r24, Y+46	; 0x2e
    1e6a:	29 2f       	mov	r18, r25
    1e6c:	28 1b       	sub	r18, r24
    1e6e:	82 2f       	mov	r24, r18
    1e70:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_vidShiftRL>

//  Clear contents on display.
	LCD_vidSendCMD(0b00000001);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_vidSendCMD>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 ea       	ldi	r26, 0xA0	; 160
    1e80:	b0 e4       	ldi	r27, 0x40	; 64
    1e82:	8b 87       	std	Y+11, r24	; 0x0b
    1e84:	9c 87       	std	Y+12, r25	; 0x0c
    1e86:	ad 87       	std	Y+13, r26	; 0x0d
    1e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e8       	ldi	r19, 0x80	; 128
    1e96:	4b e3       	ldi	r20, 0x3B	; 59
    1e98:	55 e4       	ldi	r21, 0x45	; 69
    1e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8f 83       	std	Y+7, r24	; 0x07
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	a9 87       	std	Y+9, r26	; 0x09
    1ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <LCD_vidWriteStr+0x272>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <LCD_vidWriteStr+0x2f0>
	else if (__tmp > 65535)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <LCD_vidWriteStr+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <LCD_vidWriteStr+0x2d2>
    1f0e:	8c e2       	ldi	r24, 0x2C	; 44
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_vidWriteStr+0x2c0>
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <LCD_vidWriteStr+0x2b4>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <LCD_vidWriteStr+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_vidWriteStr+0x2fc>
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);

}
    1f5e:	ae 96       	adiw	r28, 0x2e	; 46
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <LCD_Custom_Char>:

void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <LCD_Custom_Char+0x6>
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <LCD_Custom_Char+0x8>
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	8a 83       	std	Y+2, r24	; 0x02
    1f7e:	7c 83       	std	Y+4, r23	; 0x04
    1f80:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	if(loc<8)
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	88 30       	cpi	r24, 0x08	; 8
    1f86:	f8 f4       	brcc	.+62     	; 0x1fc6 <LCD_Custom_Char+0x56>
	{
		LCD_vidSendCMD(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	08 96       	adiw	r24, 0x08	; 8
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_vidSendCMD>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
    1fa0:	19 82       	std	Y+1, r1	; 0x01
    1fa2:	0e c0       	rjmp	.+28     	; 0x1fc0 <LCD_Custom_Char+0x50>
		{
			LCD_vidWriteChar(msg[i]);
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	fc 01       	movw	r30, r24
    1fb0:	e2 0f       	add	r30, r18
    1fb2:	f3 1f       	adc	r31, r19
    1fb4:	80 81       	ld	r24, Z
    1fb6:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_vidWriteChar>
{
	unsigned char i;
	if(loc<8)
	{
		LCD_vidSendCMD(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	8f 5f       	subi	r24, 0xFF	; 255
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	88 30       	cpi	r24, 0x08	; 8
    1fc4:	78 f3       	brcs	.-34     	; 0x1fa4 <LCD_Custom_Char+0x34>
		{
			LCD_vidWriteChar(msg[i]);
		}
	}
	LCD_vidSendCMD(0);
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_vidSendCMD>
}
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <main>:




void main(void)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	0f 92       	push	r0
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62


	DIO_vidSetPortDir(PORTB, 0X0F);
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	6f e0       	ldi	r22, 0x0F	; 15
    1fe8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPortDir>
	DIO_vidSetPortDir(PORTD, 0XFF);
    1fec:	83 e0       	ldi	r24, 0x03	; 3
    1fee:	6f ef       	ldi	r22, 0xFF	; 255
    1ff0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPortDir>
	DIO_vidSetPortDir(PORTD, 0X00);
    1ff4:	83 e0       	ldi	r24, 0x03	; 3
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vidSetPortDir>
	DIO_vidSetPortVal(PORTA, 0XFF);
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	6f ef       	ldi	r22, 0xFF	; 255
    2000:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_vidSetPortVal>
	LCD_vidInit();
    2004:	0e 94 24 0a 	call	0x1448	; 0x1448 <LCD_vidInit>
	KEYPAD_vidInit();
    2008:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <KEYPAD_vidInit>

	u8 key_pressedKey;
	while(1)
	{
		key_pressedKey = KEYPAD_u8GetPressedKey();
    200c:	0e 94 b7 08 	call	0x116e	; 0x116e <KEYPAD_u8GetPressedKey>
    2010:	89 83       	std	Y+1, r24	; 0x01
		LCD_vidWriteChar(key_pressedKey);
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_vidWriteChar>
    2018:	f9 cf       	rjmp	.-14     	; 0x200c <main+0x32>

0000201a <__prologue_saves__>:
    201a:	2f 92       	push	r2
    201c:	3f 92       	push	r3
    201e:	4f 92       	push	r4
    2020:	5f 92       	push	r5
    2022:	6f 92       	push	r6
    2024:	7f 92       	push	r7
    2026:	8f 92       	push	r8
    2028:	9f 92       	push	r9
    202a:	af 92       	push	r10
    202c:	bf 92       	push	r11
    202e:	cf 92       	push	r12
    2030:	df 92       	push	r13
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	ca 1b       	sub	r28, r26
    2044:	db 0b       	sbc	r29, r27
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	09 94       	ijmp

00002052 <__epilogue_restores__>:
    2052:	2a 88       	ldd	r2, Y+18	; 0x12
    2054:	39 88       	ldd	r3, Y+17	; 0x11
    2056:	48 88       	ldd	r4, Y+16	; 0x10
    2058:	5f 84       	ldd	r5, Y+15	; 0x0f
    205a:	6e 84       	ldd	r6, Y+14	; 0x0e
    205c:	7d 84       	ldd	r7, Y+13	; 0x0d
    205e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2060:	9b 84       	ldd	r9, Y+11	; 0x0b
    2062:	aa 84       	ldd	r10, Y+10	; 0x0a
    2064:	b9 84       	ldd	r11, Y+9	; 0x09
    2066:	c8 84       	ldd	r12, Y+8	; 0x08
    2068:	df 80       	ldd	r13, Y+7	; 0x07
    206a:	ee 80       	ldd	r14, Y+6	; 0x06
    206c:	fd 80       	ldd	r15, Y+5	; 0x05
    206e:	0c 81       	ldd	r16, Y+4	; 0x04
    2070:	1b 81       	ldd	r17, Y+3	; 0x03
    2072:	aa 81       	ldd	r26, Y+2	; 0x02
    2074:	b9 81       	ldd	r27, Y+1	; 0x01
    2076:	ce 0f       	add	r28, r30
    2078:	d1 1d       	adc	r29, r1
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	ed 01       	movw	r28, r26
    2086:	08 95       	ret

00002088 <_exit>:
    2088:	f8 94       	cli

0000208a <__stop_program>:
    208a:	ff cf       	rjmp	.-2      	; 0x208a <__stop_program>
